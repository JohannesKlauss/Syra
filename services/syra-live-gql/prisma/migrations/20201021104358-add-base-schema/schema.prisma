// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model User {
  id                String      @id @default(cuid())
  name              String
  email             String      @unique
  avatar            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  address           Address?
  session           String?
  role              Role        @default(USER)
  followedBy        User[]      @relation("UserFollows", references: [id])
  following         User[]      @relation("UserFollows", references: [id])
  memberOfProjects  UsersOnProjects[]
  ownsProjects      Project[]
  interests         Tag[]
}

model Address {
  id            String      @id @default(cuid())
  addressLine1  String
  addressLine2  String?
  zip           Int
  city          String
  state         String
  country       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model EarylAccessCode {
  id            String      @id @default(cuid())
  code          String      @unique
  isValid       Boolean     @default(false)
  claimedBy     User?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Project {
  id            String      @id @default(cuid())
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  members       UsersOnProjects[]
}

model UsersOnProjects {
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())

  @@id([userId, projectId])
}

model Tag {
  id            String      @id @default(cuid())
  value         String      @unique()
}

enum Role {
  ADMIN
  MODERATOR
  USER
}