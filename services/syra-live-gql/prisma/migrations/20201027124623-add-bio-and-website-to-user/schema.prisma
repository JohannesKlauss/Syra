// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model AudioAsset {
  id                String      @id @default(cuid())
  location          String
  name              String
  isPublic          Boolean?    @default(false)
  /// @TypeGraphQL.omit(output: true)
  owner             User?
}

model User {
  id                String      @id @default(cuid())
  name              String      @unique
  handle            String?     @unique
  email             String      @unique
  /// @TypeGraphQL.omit(output: true)
  password          String
  avatar            String?
  bio               String?
  website           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  address           Address?
  role              Role        @default(USER)
  followedBy        User[]      @relation("UserFollows", references: [id])
  following         User[]      @relation("UserFollows", references: [id])
  memberOfProjects  UsersOnProjects[]
  ownsProjects      Project[]
  feed              FeedItem[]
  interests         Tag[]
}

model Address {
  /// @TypeGraphQL.omit(output: true)
  id            String      @id @default(cuid())
  addressLine1  String
  addressLine2  String?
  zip           Int
  city          String
  state         String
  country       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model EarlyAccessCode {
  /// @TypeGraphQL.omit(output: true)
  id            String      @id @default(cuid())
  code          String      @unique
  isValid       Boolean     @default(true)
  claimedBy     User?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Project {
  id            String      @id @default(cuid())
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String
  name          String      @default("New Syra Project")
  isPrivate     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  members       UsersOnProjects[]
  mixdowns      Mixdown[]
}

model Mixdown {
  id            String      @id @default(cuid())
  version       Int
  project       Project
  listens       Int         @default(0)
  name          String?
  triggerdBy    User
  audio         AudioAsset
  isPusblished  Boolean?    @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UsersOnProjects {
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())

  @@id([userId, projectId])
}

model Tag {
  /// @TypeGraphQL.omit(output: true)
  id            String      @id @default(cuid())
  value         String      @unique()
}

model FeedItem {
  id            String      @id @default(cuid())
  text          String?
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String
  comments      Comment[]
  likes         FeedItemLike[]
  revisions     FeedItemRevision[]
  mixdown       Mixdown?
  isPublished   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishAt     DateTime?   @default(now())
}

model FeedItemRevision {
  id            String      @id @default(cuid())
  text          String
  parentItem    FeedItem
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Comment {
  id            String      @id @default(cuid())
  text          String
  feedItem      FeedItem?
  parentComment Comment?
  likes         CommentLike[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FeedItemLike {
  feedItem      FeedItem    @relation(fields: [feedItemId], references: [id])
  feedItemId    String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())

  @@id([userId, feedItemId])
}

model CommentLike {
  comment       Comment     @relation(fields: [commentId], references: [id])
  commentId     String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())

  @@id([userId, commentId])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}