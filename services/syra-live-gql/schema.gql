# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp!
  state: String!
  updatedAt: Timestamp!
  User(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  zip: Int!
}

type AddressAvgAggregate {
  zip: Float!
}

input AddressCreateInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  User: UserCreateManyWithoutAddressInput
  zip: Int!
}

input AddressCreateOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutUserInput
}

input AddressCreateWithoutUserInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  zip: Int!
}

enum AddressDistinctFieldEnum {
  addressLine1
  addressLine2
  city
  country
  createdAt
  id
  state
  updatedAt
  zip
}

type AddressMaxAggregate {
  zip: Int!
}

type AddressMinAggregate {
  zip: Int!
}

input AddressOrderByInput {
  addressLine1: SortOrder
  addressLine2: SortOrder
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  state: SortOrder
  updatedAt: SortOrder
  zip: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

type AddressSumAggregate {
  zip: Int!
}

input AddressUpdateInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateManyWithoutAddressInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutUserDataInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUpdateWithoutUserDataInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpsertWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserDataInput!
}

input AddressWhereInput {
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  AND: [AddressWhereInput!]
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  state: StringFilter
  updatedAt: DateTimeFilter
  User: UserListRelationFilter
  zip: IntFilter
}

input AddressWhereUniqueInput {
  id: String
}

type AggregateAddress {
  avg: AddressAvgAggregate
  count: Int!
  max: AddressMaxAggregate
  min: AddressMinAggregate
  sum: AddressSumAggregate
}

type AggregateComment {
  count: Int!
}

type AggregateCommentLike {
  count: Int!
}

type AggregateFeedItem {
  count: Int!
}

type AggregateFeedItemLike {
  count: Int!
}

type AggregateFeedItemRevision {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUsersOnProjects {
  count: Int!
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  createdAt: Timestamp!
  feedItem: FeedItem!
  feedItemId: String!
  id: String!
  likes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeDistinctFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]
  text: String!
  updatedAt: Timestamp!
}

input CommentCreateInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput!
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutFeedItemInput!]
}

input CommentCreateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
}

input CommentCreateWithoutFeedItemInput {
  createdAt: Timestamp
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutLikesInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput!
  id: String
  text: String!
  updatedAt: Timestamp
}

enum CommentDistinctFieldEnum {
  createdAt
  feedItemId
  id
  text
  updatedAt
}

type CommentLike {
  comment: Comment!
  commentId: String!
  createdAt: Timestamp!
  user: User!
  userId: String!
}

input CommentLikeCreateInput {
  comment: CommentCreateOneWithoutLikesInput!
  createdAt: Timestamp
  user: UserCreateOneWithoutCommentLikeInput!
}

input CommentLikeCreateManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
}

input CommentLikeCreateManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  create: [CommentLikeCreateWithoutUserInput!]
}

input CommentLikeCreateWithoutCommentInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutCommentLikeInput!
}

input CommentLikeCreateWithoutUserInput {
  comment: CommentCreateOneWithoutLikesInput!
  createdAt: Timestamp
}

enum CommentLikeDistinctFieldEnum {
  commentId
  createdAt
  userId
}

input CommentLikeListRelationFilter {
  every: CommentLikeWhereInput
  none: CommentLikeWhereInput
  some: CommentLikeWhereInput
}

input CommentLikeOrderByInput {
  commentId: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

input CommentLikeScalarWhereInput {
  AND: [CommentLikeScalarWhereInput!]
  commentId: StringFilter
  createdAt: DateTimeFilter
  NOT: [CommentLikeScalarWhereInput!]
  OR: [CommentLikeScalarWhereInput!]
  userId: StringFilter
}

input CommentLikeUpdateInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentLikeUpdateManyWithWhereNestedInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentLikeUpdateManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  create: [CommentLikeCreateWithoutUserInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentLikeUpdateManyWithWhereNestedInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentLikeUpdateManyWithWhereNestedInput {
  data: CommentLikeUpdateManyDataInput!
  where: CommentLikeScalarWhereInput!
}

input CommentLikeUpdateWithoutCommentDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateWithoutUserDataInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  data: CommentLikeUpdateWithoutCommentDataInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpdateWithWhereUniqueWithoutUserInput {
  data: CommentLikeUpdateWithoutUserDataInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  create: CommentLikeCreateWithoutCommentInput!
  update: CommentLikeUpdateWithoutCommentDataInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutUserInput {
  create: CommentLikeCreateWithoutUserInput!
  update: CommentLikeUpdateWithoutUserDataInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeWhereInput {
  AND: [CommentLikeWhereInput!]
  comment: CommentRelationFilter
  commentId: StringFilter
  createdAt: DateTimeFilter
  NOT: [CommentLikeWhereInput!]
  OR: [CommentLikeWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
}

input CommentLikeWhereUniqueInput {
  userId_commentId: UserIdCommentIdCompoundUniqueInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutFeedItemInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneRequiredWithoutLikesInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutLikesInput
  update: CommentUpdateWithoutLikesDataInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateWithoutFeedItemDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutLikesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutFeedItemInput {
  data: CommentUpdateWithoutFeedItemDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  update: CommentUpdateWithoutLikesDataInput!
}

input CommentUpsertWithWhereUniqueWithoutFeedItemInput {
  create: CommentCreateWithoutFeedItemInput!
  update: CommentUpdateWithoutFeedItemDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringFilter
  id: StringFilter
  likes: CommentLikeListRelationFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

type EarlyAccessCode {
  claimedBy: User
  code: String!
  createdAt: Timestamp!
  isValid: Boolean!
  updatedAt: Timestamp!
  userId: String
}

input EarlyAccessCodeCreateManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
}

input EarlyAccessCodeCreateWithoutClaimedByInput {
  code: String!
  createdAt: Timestamp
  id: String
  isValid: Boolean
  updatedAt: Timestamp
}

enum EarlyAccessCodeDistinctFieldEnum {
  code
  createdAt
  id
  isValid
  updatedAt
  userId
}

input EarlyAccessCodeListRelationFilter {
  every: EarlyAccessCodeWhereInput
  none: EarlyAccessCodeWhereInput
  some: EarlyAccessCodeWhereInput
}

input EarlyAccessCodeOrderByInput {
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isValid: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input EarlyAccessCodeScalarWhereInput {
  AND: [EarlyAccessCodeScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  NOT: [EarlyAccessCodeScalarWhereInput!]
  OR: [EarlyAccessCodeScalarWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeUpdateManyDataInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpdateManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
  delete: [EarlyAccessCodeWhereUniqueInput!]
  deleteMany: [EarlyAccessCodeScalarWhereInput!]
  disconnect: [EarlyAccessCodeWhereUniqueInput!]
  set: [EarlyAccessCodeWhereUniqueInput!]
  update: [EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput!]
  updateMany: [EarlyAccessCodeUpdateManyWithWhereNestedInput!]
  upsert: [EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput!]
}

input EarlyAccessCodeUpdateManyWithWhereNestedInput {
  data: EarlyAccessCodeUpdateManyDataInput!
  where: EarlyAccessCodeScalarWhereInput!
}

input EarlyAccessCodeUpdateWithoutClaimedByDataInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput {
  data: EarlyAccessCodeUpdateWithoutClaimedByDataInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput {
  create: EarlyAccessCodeCreateWithoutClaimedByInput!
  update: EarlyAccessCodeUpdateWithoutClaimedByDataInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeWhereInput {
  AND: [EarlyAccessCodeWhereInput!]
  claimedBy: UserRelationFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  NOT: [EarlyAccessCodeWhereInput!]
  OR: [EarlyAccessCodeWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeWhereUniqueInput {
  code: String
  id: String
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type FeedItem {
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  createdAt: Timestamp!
  id: String!
  isPublished: Boolean!
  likes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeDistinctFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]
  owner: User!
  ownerId: String!
  publishAt: Timestamp
  revisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionDistinctFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]
  text: String!
  updatedAt: Timestamp!
}

input FeedItemCreateInput {
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  owner: UserCreateOneWithoutFeedInput!
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String!
  updatedAt: Timestamp
}

input FeedItemCreateManyWithoutOwnerInput {
  connect: [FeedItemWhereUniqueInput!]
  create: [FeedItemCreateWithoutOwnerInput!]
}

input FeedItemCreateOneWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutCommentsInput
}

input FeedItemCreateOneWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutLikesInput
}

input FeedItemCreateOneWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutRevisionsInput
}

input FeedItemCreateWithoutCommentsInput {
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  owner: UserCreateOneWithoutFeedInput!
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String!
  updatedAt: Timestamp
}

input FeedItemCreateWithoutLikesInput {
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  owner: UserCreateOneWithoutFeedInput!
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String!
  updatedAt: Timestamp
}

input FeedItemCreateWithoutOwnerInput {
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String!
  updatedAt: Timestamp
}

input FeedItemCreateWithoutRevisionsInput {
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  owner: UserCreateOneWithoutFeedInput!
  publishAt: Timestamp
  text: String!
  updatedAt: Timestamp
}

enum FeedItemDistinctFieldEnum {
  createdAt
  id
  isPublished
  ownerId
  publishAt
  text
  updatedAt
}

type FeedItemLike {
  createdAt: Timestamp!
  feedItem: FeedItem!
  feedItemId: String!
  user: User!
  userId: String!
}

input FeedItemLikeCreateInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutLikesInput!
  user: UserCreateOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
}

input FeedItemLikeCreateManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
}

input FeedItemLikeCreateWithoutFeedItemInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateWithoutUserInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutLikesInput!
}

enum FeedItemLikeDistinctFieldEnum {
  createdAt
  feedItemId
  userId
}

input FeedItemLikeListRelationFilter {
  every: FeedItemLikeWhereInput
  none: FeedItemLikeWhereInput
  some: FeedItemLikeWhereInput
}

input FeedItemLikeOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  userId: SortOrder
}

input FeedItemLikeScalarWhereInput {
  AND: [FeedItemLikeScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  NOT: [FeedItemLikeScalarWhereInput!]
  OR: [FeedItemLikeScalarWhereInput!]
  userId: StringFilter
}

input FeedItemLikeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemLikeUpdateManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereNestedInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input FeedItemLikeUpdateManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereNestedInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input FeedItemLikeUpdateManyWithWhereNestedInput {
  data: FeedItemLikeUpdateManyDataInput!
  where: FeedItemLikeScalarWhereInput!
}

input FeedItemLikeUpdateWithoutFeedItemDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
}

input FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput {
  data: FeedItemLikeUpdateWithoutFeedItemDataInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpdateWithWhereUniqueWithoutUserInput {
  data: FeedItemLikeUpdateWithoutUserDataInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput {
  create: FeedItemLikeCreateWithoutFeedItemInput!
  update: FeedItemLikeUpdateWithoutFeedItemDataInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpsertWithWhereUniqueWithoutUserInput {
  create: FeedItemLikeCreateWithoutUserInput!
  update: FeedItemLikeUpdateWithoutUserDataInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeWhereInput {
  AND: [FeedItemLikeWhereInput!]
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringFilter
  NOT: [FeedItemLikeWhereInput!]
  OR: [FeedItemLikeWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
}

input FeedItemLikeWhereUniqueInput {
  userId_feedItemId: UserIdFeedItemIdCompoundUniqueInput
}

input FeedItemListRelationFilter {
  every: FeedItemWhereInput
  none: FeedItemWhereInput
  some: FeedItemWhereInput
}

input FeedItemOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isPublished: SortOrder
  ownerId: SortOrder
  publishAt: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input FeedItemRelationFilter {
  is: FeedItemWhereInput
  isNot: FeedItemWhereInput
}

type FeedItemRevision {
  createdAt: Timestamp!
  feedItemId: String!
  id: String!
  parentItem: FeedItem!
  text: String!
  updatedAt: Timestamp!
}

input FeedItemRevisionCreateInput {
  createdAt: Timestamp
  id: String
  parentItem: FeedItemCreateOneWithoutRevisionsInput!
  text: String!
  updatedAt: Timestamp
}

input FeedItemRevisionCreateManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
}

input FeedItemRevisionCreateWithoutParentItemInput {
  createdAt: Timestamp
  id: String
  text: String!
  updatedAt: Timestamp
}

enum FeedItemRevisionDistinctFieldEnum {
  createdAt
  feedItemId
  id
  text
  updatedAt
}

input FeedItemRevisionListRelationFilter {
  every: FeedItemRevisionWhereInput
  none: FeedItemRevisionWhereInput
  some: FeedItemRevisionWhereInput
}

input FeedItemRevisionOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input FeedItemRevisionScalarWhereInput {
  AND: [FeedItemRevisionScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  NOT: [FeedItemRevisionScalarWhereInput!]
  OR: [FeedItemRevisionScalarWhereInput!]
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentItem: FeedItemUpdateOneRequiredWithoutRevisionsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
  delete: [FeedItemRevisionWhereUniqueInput!]
  deleteMany: [FeedItemRevisionScalarWhereInput!]
  disconnect: [FeedItemRevisionWhereUniqueInput!]
  set: [FeedItemRevisionWhereUniqueInput!]
  update: [FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput!]
  updateMany: [FeedItemRevisionUpdateManyWithWhereNestedInput!]
  upsert: [FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput!]
}

input FeedItemRevisionUpdateManyWithWhereNestedInput {
  data: FeedItemRevisionUpdateManyDataInput!
  where: FeedItemRevisionScalarWhereInput!
}

input FeedItemRevisionUpdateWithoutParentItemDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput {
  data: FeedItemRevisionUpdateWithoutParentItemDataInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput {
  create: FeedItemRevisionCreateWithoutParentItemInput!
  update: FeedItemRevisionUpdateWithoutParentItemDataInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionWhereInput {
  AND: [FeedItemRevisionWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  NOT: [FeedItemRevisionWhereInput!]
  OR: [FeedItemRevisionWhereInput!]
  parentItem: FeedItemRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionWhereUniqueInput {
  id: String
}

input FeedItemScalarWhereInput {
  AND: [FeedItemScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  NOT: [FeedItemScalarWhereInput!]
  OR: [FeedItemScalarWhereInput!]
  ownerId: StringFilter
  publishAt: DateTimeNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemUpdateInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  owner: UserUpdateOneRequiredWithoutFeedInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyWithoutOwnerInput {
  connect: [FeedItemWhereUniqueInput!]
  create: [FeedItemCreateWithoutOwnerInput!]
  delete: [FeedItemWhereUniqueInput!]
  deleteMany: [FeedItemScalarWhereInput!]
  disconnect: [FeedItemWhereUniqueInput!]
  set: [FeedItemWhereUniqueInput!]
  update: [FeedItemUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [FeedItemUpdateManyWithWhereNestedInput!]
  upsert: [FeedItemUpsertWithWhereUniqueWithoutOwnerInput!]
}

input FeedItemUpdateManyWithWhereNestedInput {
  data: FeedItemUpdateManyDataInput!
  where: FeedItemScalarWhereInput!
}

input FeedItemUpdateOneRequiredWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutCommentsInput
  update: FeedItemUpdateWithoutCommentsDataInput
  upsert: FeedItemUpsertWithoutCommentsInput
}

input FeedItemUpdateOneRequiredWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutLikesInput
  update: FeedItemUpdateWithoutLikesDataInput
  upsert: FeedItemUpsertWithoutLikesInput
}

input FeedItemUpdateOneRequiredWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  create: FeedItemCreateWithoutRevisionsInput
  update: FeedItemUpdateWithoutRevisionsDataInput
  upsert: FeedItemUpsertWithoutRevisionsInput
}

input FeedItemUpdateWithoutCommentsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  owner: UserUpdateOneRequiredWithoutFeedInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutLikesDataInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutFeedInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutOwnerDataInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutRevisionsDataInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  owner: UserUpdateOneRequiredWithoutFeedInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithWhereUniqueWithoutOwnerInput {
  data: FeedItemUpdateWithoutOwnerDataInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpsertWithoutCommentsInput {
  create: FeedItemCreateWithoutCommentsInput!
  update: FeedItemUpdateWithoutCommentsDataInput!
}

input FeedItemUpsertWithoutLikesInput {
  create: FeedItemCreateWithoutLikesInput!
  update: FeedItemUpdateWithoutLikesDataInput!
}

input FeedItemUpsertWithoutRevisionsInput {
  create: FeedItemCreateWithoutRevisionsInput!
  update: FeedItemUpdateWithoutRevisionsDataInput!
}

input FeedItemUpsertWithWhereUniqueWithoutOwnerInput {
  create: FeedItemCreateWithoutOwnerInput!
  update: FeedItemUpdateWithoutOwnerDataInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemWhereInput {
  AND: [FeedItemWhereInput!]
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  likes: FeedItemLikeListRelationFilter
  NOT: [FeedItemWhereInput!]
  OR: [FeedItemWhereInput!]
  owner: UserRelationFilter
  ownerId: StringFilter
  publishAt: DateTimeNullableFilter
  revisions: FeedItemRevisionListRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createComment(data: CommentCreateInput!): Comment!
  createCommentLike(data: CommentLikeCreateInput!): CommentLike!
  createFeedItem(data: FeedItemCreateInput!): FeedItem!
  createFeedItemLike(data: FeedItemLikeCreateInput!): FeedItemLike!
  createFeedItemRevision(data: FeedItemRevisionCreateInput!): FeedItemRevision!
  createProject(data: ProjectCreateInput!): Project!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  createUsersOnProjects(data: UsersOnProjectsCreateInput!): UsersOnProjects!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCommentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  deleteFeedItem(where: FeedItemWhereUniqueInput!): FeedItem
  deleteFeedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  deleteFeedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  deleteManyAddress(where: AddressWhereInput): BatchPayload!
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteManyCommentLike(where: CommentLikeWhereInput): BatchPayload!
  deleteManyFeedItem(where: FeedItemWhereInput): BatchPayload!
  deleteManyFeedItemLike(where: FeedItemLikeWhereInput): BatchPayload!
  deleteManyFeedItemRevision(where: FeedItemRevisionWhereInput): BatchPayload!
  deleteManyProject(where: ProjectWhereInput): BatchPayload!
  deleteManyTag(where: TagWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyUsersOnProjects(where: UsersOnProjectsWhereInput): BatchPayload!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  signUpUser(data: UserSignUpInput!): User!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCommentLike(data: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike
  updateFeedItem(data: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem
  updateFeedItemLike(data: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  updateFeedItemRevision(data: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyCommentLike(data: CommentLikeUpdateManyMutationInput!, where: CommentLikeWhereInput): BatchPayload!
  updateManyFeedItem(data: FeedItemUpdateManyMutationInput!, where: FeedItemWhereInput): BatchPayload!
  updateManyFeedItemLike(data: FeedItemLikeUpdateManyMutationInput!, where: FeedItemLikeWhereInput): BatchPayload!
  updateManyFeedItemRevision(data: FeedItemRevisionUpdateManyMutationInput!, where: FeedItemRevisionWhereInput): BatchPayload!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUsersOnProjects(data: UsersOnProjectsUpdateManyMutationInput!, where: UsersOnProjectsWhereInput): BatchPayload!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUsersOnProjects(data: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  upsertAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertCommentLike(create: CommentLikeCreateInput!, update: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike!
  upsertFeedItem(create: FeedItemCreateInput!, update: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem!
  upsertFeedItemLike(create: FeedItemLikeCreateInput!, update: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike!
  upsertFeedItemRevision(create: FeedItemRevisionCreateInput!, update: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision!
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUsersOnProjects(create: UsersOnProjectsCreateInput!, update: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  createdAt: Timestamp!
  id: String!
  isPrivate: Boolean!
  members(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsDistinctFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]
  owner: User!
  ownerId: String!
  updatedAt: Timestamp!
}

input ProjectCreateInput {
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  members: UsersOnProjectsCreateManyWithoutProjectInput
  owner: UserCreateOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutOwnerInput!]
}

input ProjectCreateOneWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
}

input ProjectCreateWithoutMembersInput {
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  owner: UserCreateOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutOwnerInput {
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  members: UsersOnProjectsCreateManyWithoutProjectInput
  updatedAt: Timestamp
}

enum ProjectDistinctFieldEnum {
  createdAt
  id
  isPrivate
  ownerId
  updatedAt
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isPrivate: SortOrder
  ownerId: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isPrivate: BoolFilter
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
  update: ProjectUpdateWithoutMembersDataInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateWithoutMembersDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutOwnerDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  update: ProjectUpdateWithoutMembersDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isPrivate: BoolFilter
  members: UsersOnProjectsListRelationFilter
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  owner: UserRelationFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressDistinctFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAddress(cursor: AddressWhereUniqueInput, distinct: [AddressDistinctFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateComment(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateCommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeDistinctFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): AggregateCommentLike!
  aggregateFeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemDistinctFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): AggregateFeedItem!
  aggregateFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeDistinctFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): AggregateFeedItemLike!
  aggregateFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionDistinctFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): AggregateFeedItemRevision!
  aggregateProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectDistinctFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject!
  aggregateTag(cursor: TagWhereUniqueInput, distinct: [TagDistinctFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsDistinctFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): AggregateUsersOnProjects!
  comment(where: CommentWhereUniqueInput!): Comment
  commentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  commentLikes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeDistinctFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  feedItem(where: FeedItemWhereUniqueInput!): FeedItem
  feedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  feedItemLikes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeDistinctFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]!
  feedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  feedItemRevisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionDistinctFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]!
  feedItems(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemDistinctFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]!
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressDistinctFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeDistinctFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): CommentLike
  findFirstFeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemDistinctFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): FeedItem
  findFirstFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeDistinctFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): FeedItemLike
  findFirstFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionDistinctFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): FeedItemRevision
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectDistinctFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): Project
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagDistinctFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsDistinctFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): UsersOnProjects
  findManyUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsDistinctFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]!
  findOneUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  me: User!
  project(where: ProjectWhereUniqueInput!): Project
  projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectDistinctFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagDistinctFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  User: User
  userId: String
  value: String!
}

input TagCreateInput {
  id: String
  User: UserCreateOneWithoutInterestsInput
  value: String!
}

input TagCreateManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutUserInput!]
}

input TagCreateWithoutUserInput {
  id: String
  value: String!
}

enum TagDistinctFieldEnum {
  id
  userId
  value
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  id: SortOrder
  userId: SortOrder
  value: SortOrder
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  id: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  userId: StringNullableFilter
  value: StringFilter
}

input TagUpdateInput {
  id: StringFieldUpdateOperationsInput
  User: UserUpdateOneWithoutInterestsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutUserInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutUserInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutUserDataInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutUserInput {
  data: TagUpdateWithoutUserDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutUserInput {
  create: TagCreateWithoutUserInput!
  update: TagUpdateWithoutUserDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  id: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  User: UserRelationFilter
  userId: StringNullableFilter
  value: StringFilter
}

input TagWhereUniqueInput {
  id: String
  value: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  address: Address
  addressId: String
  avatar: String
  CommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeDistinctFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]
  createdAt: Timestamp!
  EarlyAccessCode(cursor: EarlyAccessCodeWhereUniqueInput, distinct: [EarlyAccessCodeDistinctFieldEnum!], orderBy: [EarlyAccessCodeOrderByInput!], skip: Int, take: Int, where: EarlyAccessCodeWhereInput): [EarlyAccessCode!]
  email: String!
  feed(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemDistinctFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]
  FeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeDistinctFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]
  followedBy(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  following(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  id: String!
  interests(cursor: TagWhereUniqueInput, distinct: [TagDistinctFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]
  memberOfProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsDistinctFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]
  name: String!
  ownsProjects(cursor: ProjectWhereUniqueInput, distinct: [ProjectDistinctFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]
  role: Role!
  updatedAt: Timestamp!
}

input UserCreateInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutAddressInput!]
}

input UserCreateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowedByInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateOneWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentLikeInput
}

input UserCreateOneWithoutFeedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFeedInput
}

input UserCreateOneWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFeedItemLikeInput
}

input UserCreateOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInterestsInput
}

input UserCreateOneWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMemberOfProjectsInput
}

input UserCreateOneWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOwnsProjectsInput
}

input UserCreateWithoutAddressInput {
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutCommentLikeInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutFeedInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutFeedItemLikeInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutFollowedByInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutFollowingInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutInterestsInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutMemberOfProjectsInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
}

input UserCreateWithoutOwnsProjectsInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  id: String
  interests: TagCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  password: String!
  role: Role
  updatedAt: Timestamp
}

enum UserDistinctFieldEnum {
  addressId
  avatar
  createdAt
  email
  id
  name
  password
  role
  updatedAt
}

input UserIdCommentIdCompoundUniqueInput {
  commentId: String!
  userId: String!
}

input UserIdFeedItemIdCompoundUniqueInput {
  feedItemId: String!
  userId: String!
}

input UserIdProjectIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  addressId: SortOrder
  avatar: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserScalarWhereInput {
  addressId: StringNullableFilter
  AND: [UserScalarWhereInput!]
  avatar: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserSignUpInput {
  accessCode: String!
  email: String!
  name: String!
  password: String!
}

type UsersOnProjects {
  createdAt: Timestamp!
  project: Project!
  projectId: String!
  user: User!
  userId: String!
}

input UsersOnProjectsCreateInput {
  createdAt: Timestamp
  project: ProjectCreateOneWithoutMembersInput!
  user: UserCreateOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
}

input UsersOnProjectsCreateManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
}

input UsersOnProjectsCreateWithoutProjectInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateWithoutUserInput {
  createdAt: Timestamp
  project: ProjectCreateOneWithoutMembersInput!
}

enum UsersOnProjectsDistinctFieldEnum {
  createdAt
  projectId
  userId
}

input UsersOnProjectsListRelationFilter {
  every: UsersOnProjectsWhereInput
  none: UsersOnProjectsWhereInput
  some: UsersOnProjectsWhereInput
}

input UsersOnProjectsOrderByInput {
  createdAt: SortOrder
  projectId: SortOrder
  userId: SortOrder
}

input UsersOnProjectsScalarWhereInput {
  AND: [UsersOnProjectsScalarWhereInput!]
  createdAt: DateTimeFilter
  NOT: [UsersOnProjectsScalarWhereInput!]
  OR: [UsersOnProjectsScalarWhereInput!]
  projectId: StringFilter
  userId: StringFilter
}

input UsersOnProjectsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnProjectsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnProjectsUpdateManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereNestedInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput!]
}

input UsersOnProjectsUpdateManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereNestedInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnProjectsUpdateManyWithWhereNestedInput {
  data: UsersOnProjectsUpdateManyDataInput!
  where: UsersOnProjectsScalarWhereInput!
}

input UsersOnProjectsUpdateWithoutProjectDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput {
  data: UsersOnProjectsUpdateWithoutProjectDataInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnProjectsUpdateWithoutUserDataInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput {
  create: UsersOnProjectsCreateWithoutProjectInput!
  update: UsersOnProjectsUpdateWithoutProjectDataInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnProjectsCreateWithoutUserInput!
  update: UsersOnProjectsUpdateWithoutUserDataInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsWhereInput {
  AND: [UsersOnProjectsWhereInput!]
  createdAt: DateTimeFilter
  NOT: [UsersOnProjectsWhereInput!]
  OR: [UsersOnProjectsWhereInput!]
  project: ProjectRelationFilter
  projectId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UsersOnProjectsWhereUniqueInput {
  userId_projectId: UserIdProjectIdCompoundUniqueInput
}

input UserUpdateInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyDataInput {
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutAddressInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAddressInput!]
}

input UserUpdateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedByInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedByInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentLikeInput
  update: UserUpdateWithoutCommentLikeDataInput
  upsert: UserUpsertWithoutCommentLikeInput
}

input UserUpdateOneRequiredWithoutFeedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFeedInput
  update: UserUpdateWithoutFeedDataInput
  upsert: UserUpsertWithoutFeedInput
}

input UserUpdateOneRequiredWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutFeedItemLikeInput
  update: UserUpdateWithoutFeedItemLikeDataInput
  upsert: UserUpsertWithoutFeedItemLikeInput
}

input UserUpdateOneRequiredWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMemberOfProjectsInput
  update: UserUpdateWithoutMemberOfProjectsDataInput
  upsert: UserUpsertWithoutMemberOfProjectsInput
}

input UserUpdateOneRequiredWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOwnsProjectsInput
  update: UserUpdateWithoutOwnsProjectsDataInput
  upsert: UserUpsertWithoutOwnsProjectsInput
}

input UserUpdateOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInterestsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInterestsDataInput
  upsert: UserUpsertWithoutInterestsInput
}

input UserUpdateWithoutAddressDataInput {
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentLikeDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedItemLikeDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowedByDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowingDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutInterestsDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutMemberOfProjectsDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutOwnsProjectsDataInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutOwnerInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutAddressInput {
  data: UserUpdateWithoutAddressDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowedByInput {
  data: UserUpdateWithoutFollowedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentLikeInput {
  create: UserCreateWithoutCommentLikeInput!
  update: UserUpdateWithoutCommentLikeDataInput!
}

input UserUpsertWithoutFeedInput {
  create: UserCreateWithoutFeedInput!
  update: UserUpdateWithoutFeedDataInput!
}

input UserUpsertWithoutFeedItemLikeInput {
  create: UserCreateWithoutFeedItemLikeInput!
  update: UserUpdateWithoutFeedItemLikeDataInput!
}

input UserUpsertWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput!
  update: UserUpdateWithoutInterestsDataInput!
}

input UserUpsertWithoutMemberOfProjectsInput {
  create: UserCreateWithoutMemberOfProjectsInput!
  update: UserUpdateWithoutMemberOfProjectsDataInput!
}

input UserUpsertWithoutOwnsProjectsInput {
  create: UserCreateWithoutOwnsProjectsInput!
  update: UserUpdateWithoutOwnsProjectsDataInput!
}

input UserUpsertWithWhereUniqueWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  update: UserUpdateWithoutAddressDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  update: UserUpdateWithoutFollowedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  address: AddressRelationFilter
  addressId: StringNullableFilter
  AND: [UserWhereInput!]
  avatar: StringNullableFilter
  CommentLike: CommentLikeListRelationFilter
  createdAt: DateTimeFilter
  EarlyAccessCode: EarlyAccessCodeListRelationFilter
  email: StringFilter
  feed: FeedItemListRelationFilter
  FeedItemLike: FeedItemLikeListRelationFilter
  followedBy: UserListRelationFilter
  following: UserListRelationFilter
  id: StringFilter
  interests: TagListRelationFilter
  memberOfProjects: UsersOnProjectsListRelationFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  ownsProjects: ProjectListRelationFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  name: String
}
