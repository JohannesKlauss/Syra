# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  User(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp!
  state: String!
  updatedAt: Timestamp!
  zip: Int!
}

type AddressAvgAggregate {
  zip: Float!
}

type AddressCountAggregate {
  _all: Int!
  addressLine1: Int
  addressLine2: Int
  city: Int
  country: Int
  createdAt: Int
  id: Int
  state: Int
  updatedAt: Int
  zip: Int!
}

input AddressCreateInput {
  User: UserCreateNestedManyWithoutAddressInput
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  zip: Int!
}

input AddressCreateNestedOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressCreateWithoutUserInput
}

input AddressCreateOrConnectWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutUserInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  zip: Int!
}

type AddressMaxAggregate {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  createdAt: Timestamp
  id: String
  state: String
  updatedAt: Timestamp
  zip: Int!
}

type AddressMinAggregate {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  createdAt: Timestamp
  id: String
  state: String
  updatedAt: Timestamp
  zip: Int!
}

input AddressOrderByInput {
  addressLine1: SortOrder
  addressLine2: SortOrder
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  state: SortOrder
  updatedAt: SortOrder
  zip: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  addressLine1
  addressLine2
  city
  country
  createdAt
  id
  state
  updatedAt
  zip
}

type AddressSumAggregate {
  zip: Int!
}

input AddressUpdateInput {
  User: UserUpdateManyWithoutAddressInput
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUpdateWithoutUserInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpsertWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  User: UserListRelationFilter
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  state: StringFilter
  updatedAt: DateTimeFilter
  zip: IntFilter
}

input AddressWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAddress {
  avg: AddressAvgAggregate
  count: AddressCountAggregate
  max: AddressMaxAggregate
  min: AddressMinAggregate
  sum: AddressSumAggregate
}

type AggregateBand {
  count: BandCountAggregate
  max: BandMaxAggregate
  min: BandMinAggregate
}

type AggregateComment {
  count: CommentCountAggregate
  max: CommentMaxAggregate
  min: CommentMinAggregate
}

type AggregateCommentLike {
  count: CommentLikeCountAggregate
  max: CommentLikeMaxAggregate
  min: CommentLikeMinAggregate
}

type AggregateFeedItem {
  count: FeedItemCountAggregate
  max: FeedItemMaxAggregate
  min: FeedItemMinAggregate
}

type AggregateFeedItemLike {
  count: FeedItemLikeCountAggregate
  max: FeedItemLikeMaxAggregate
  min: FeedItemLikeMinAggregate
}

type AggregateFeedItemRevision {
  count: FeedItemRevisionCountAggregate
  max: FeedItemRevisionMaxAggregate
  min: FeedItemRevisionMinAggregate
}

type AggregateIssue {
  count: IssueCountAggregate
  max: IssueMaxAggregate
  min: IssueMinAggregate
}

type AggregateMixdown {
  avg: MixdownAvgAggregate
  count: MixdownCountAggregate
  max: MixdownMaxAggregate
  min: MixdownMinAggregate
  sum: MixdownSumAggregate
}

type AggregateProject {
  count: ProjectCountAggregate
  max: ProjectMaxAggregate
  min: ProjectMinAggregate
}

type AggregateTag {
  count: TagCountAggregate
  max: TagMaxAggregate
  min: TagMinAggregate
}

type AggregateUser {
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
}

type AggregateUsersOnProjects {
  count: UsersOnProjectsCountAggregate
  max: UsersOnProjectsMaxAggregate
  min: UsersOnProjectsMinAggregate
}

type AggregateVersionInformation {
  count: VersionInformationCountAggregate
  max: VersionInformationMaxAggregate
  min: VersionInformationMinAggregate
}

type Asset {
  Mixdown(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]!
  id: String!
  isPublic: Boolean
  location: String!
  mimeType: String!
  name: String!
  usedInProjects(cursor: AssetsOnProjectsWhereUniqueInput, distinct: [AssetsOnProjectsScalarFieldEnum!], orderBy: [AssetsOnProjectsOrderByInput!], skip: Int, take: Int, where: AssetsOnProjectsWhereInput): [AssetsOnProjects!]!
  userId: String
}

input AssetCreateNestedManyWithoutOwnerInput {
  connect: [AssetWhereUniqueInput!]
  connectOrCreate: [AssetCreateOrConnectWithoutOwnerInput!]
  create: [AssetCreateWithoutOwnerInput!]
}

input AssetCreateNestedOneWithoutMixdownInput {
  connect: AssetWhereUniqueInput
  connectOrCreate: AssetCreateOrConnectWithoutMixdownInput
  create: AssetCreateWithoutMixdownInput
}

input AssetCreateNestedOneWithoutUsedInProjectsInput {
  connect: AssetWhereUniqueInput
  connectOrCreate: AssetCreateOrConnectWithoutUsedInProjectsInput
  create: AssetCreateWithoutUsedInProjectsInput
}

input AssetCreateOrConnectWithoutMixdownInput {
  create: AssetCreateWithoutMixdownInput!
  where: AssetWhereUniqueInput!
}

input AssetCreateOrConnectWithoutOwnerInput {
  create: AssetCreateWithoutOwnerInput!
  where: AssetWhereUniqueInput!
}

input AssetCreateOrConnectWithoutUsedInProjectsInput {
  create: AssetCreateWithoutUsedInProjectsInput!
  where: AssetWhereUniqueInput!
}

input AssetCreateWithoutMixdownInput {
  id: String
  isPublic: Boolean
  location: String!
  mimeType: String!
  name: String!
  owner: UserCreateNestedOneWithoutAssetInput
  usedInProjects: AssetsOnProjectsCreateNestedManyWithoutAssetInput
}

input AssetCreateWithoutOwnerInput {
  Mixdown: MixdownCreateNestedManyWithoutAudioInput
  id: String
  isPublic: Boolean
  location: String!
  mimeType: String!
  name: String!
  usedInProjects: AssetsOnProjectsCreateNestedManyWithoutAssetInput
}

input AssetCreateWithoutUsedInProjectsInput {
  Mixdown: MixdownCreateNestedManyWithoutAudioInput
  id: String
  isPublic: Boolean
  location: String!
  mimeType: String!
  name: String!
  owner: UserCreateNestedOneWithoutAssetInput
}

input AssetListRelationFilter {
  every: AssetWhereInput
  none: AssetWhereInput
  some: AssetWhereInput
}

input AssetOrderByInput {
  id: SortOrder
  isPublic: SortOrder
  location: SortOrder
  mimeType: SortOrder
  name: SortOrder
  userId: SortOrder
}

input AssetRelationFilter {
  is: AssetWhereInput
  isNot: AssetWhereInput
}

enum AssetScalarFieldEnum {
  id
  isPublic
  location
  mimeType
  name
  userId
}

input AssetScalarWhereInput {
  AND: [AssetScalarWhereInput!]
  NOT: [AssetScalarWhereInput!]
  OR: [AssetScalarWhereInput!]
  id: StringFilter
  isPublic: BoolNullableFilter
  location: StringFilter
  mimeType: StringFilter
  name: StringFilter
  userId: StringNullableFilter
}

input AssetUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  mimeType: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input AssetUpdateManyWithWhereWithoutOwnerInput {
  data: AssetUpdateManyMutationInput!
  where: AssetScalarWhereInput!
}

input AssetUpdateManyWithoutOwnerInput {
  connect: [AssetWhereUniqueInput!]
  connectOrCreate: [AssetCreateOrConnectWithoutOwnerInput!]
  create: [AssetCreateWithoutOwnerInput!]
  delete: [AssetWhereUniqueInput!]
  deleteMany: [AssetScalarWhereInput!]
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [AssetUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [AssetUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AssetUpdateOneRequiredWithoutMixdownInput {
  connect: AssetWhereUniqueInput
  connectOrCreate: AssetCreateOrConnectWithoutMixdownInput
  create: AssetCreateWithoutMixdownInput
  update: AssetUpdateWithoutMixdownInput
  upsert: AssetUpsertWithoutMixdownInput
}

input AssetUpdateOneRequiredWithoutUsedInProjectsInput {
  connect: AssetWhereUniqueInput
  connectOrCreate: AssetCreateOrConnectWithoutUsedInProjectsInput
  create: AssetCreateWithoutUsedInProjectsInput
  update: AssetUpdateWithoutUsedInProjectsInput
  upsert: AssetUpsertWithoutUsedInProjectsInput
}

input AssetUpdateWithWhereUniqueWithoutOwnerInput {
  data: AssetUpdateWithoutOwnerInput!
  where: AssetWhereUniqueInput!
}

input AssetUpdateWithoutMixdownInput {
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  mimeType: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutAssetInput
  usedInProjects: AssetsOnProjectsUpdateManyWithoutAssetInput
}

input AssetUpdateWithoutOwnerInput {
  Mixdown: MixdownUpdateManyWithoutAudioInput
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  mimeType: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  usedInProjects: AssetsOnProjectsUpdateManyWithoutAssetInput
}

input AssetUpdateWithoutUsedInProjectsInput {
  Mixdown: MixdownUpdateManyWithoutAudioInput
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  mimeType: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutAssetInput
}

input AssetUpsertWithWhereUniqueWithoutOwnerInput {
  create: AssetCreateWithoutOwnerInput!
  update: AssetUpdateWithoutOwnerInput!
  where: AssetWhereUniqueInput!
}

input AssetUpsertWithoutMixdownInput {
  create: AssetCreateWithoutMixdownInput!
  update: AssetUpdateWithoutMixdownInput!
}

input AssetUpsertWithoutUsedInProjectsInput {
  create: AssetCreateWithoutUsedInProjectsInput!
  update: AssetUpdateWithoutUsedInProjectsInput!
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  Mixdown: MixdownListRelationFilter
  NOT: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  id: StringFilter
  isPublic: BoolNullableFilter
  location: StringFilter
  mimeType: StringFilter
  name: StringFilter
  owner: UserRelationFilter
  usedInProjects: AssetsOnProjectsListRelationFilter
  userId: StringNullableFilter
}

input AssetWhereUniqueInput {
  id: String
}

type AssetsOnProjects {
  assetId: String!
  createdAt: Timestamp!
  projectId: String!
}

input AssetsOnProjectsAssetIdProjectIdCompoundUniqueInput {
  assetId: String!
  projectId: String!
}

input AssetsOnProjectsCreateNestedManyWithoutAssetInput {
  connect: [AssetsOnProjectsWhereUniqueInput!]
  connectOrCreate: [AssetsOnProjectsCreateOrConnectWithoutAssetInput!]
  create: [AssetsOnProjectsCreateWithoutAssetInput!]
}

input AssetsOnProjectsCreateNestedManyWithoutProjectInput {
  connect: [AssetsOnProjectsWhereUniqueInput!]
  connectOrCreate: [AssetsOnProjectsCreateOrConnectWithoutProjectInput!]
  create: [AssetsOnProjectsCreateWithoutProjectInput!]
}

input AssetsOnProjectsCreateOrConnectWithoutAssetInput {
  create: AssetsOnProjectsCreateWithoutAssetInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsCreateOrConnectWithoutProjectInput {
  create: AssetsOnProjectsCreateWithoutProjectInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsCreateWithoutAssetInput {
  createdAt: Timestamp
  project: ProjectCreateNestedOneWithoutAssetsInput!
}

input AssetsOnProjectsCreateWithoutProjectInput {
  asset: AssetCreateNestedOneWithoutUsedInProjectsInput!
  createdAt: Timestamp
}

input AssetsOnProjectsListRelationFilter {
  every: AssetsOnProjectsWhereInput
  none: AssetsOnProjectsWhereInput
  some: AssetsOnProjectsWhereInput
}

input AssetsOnProjectsOrderByInput {
  assetId: SortOrder
  createdAt: SortOrder
  projectId: SortOrder
}

enum AssetsOnProjectsScalarFieldEnum {
  assetId
  createdAt
  projectId
}

input AssetsOnProjectsScalarWhereInput {
  AND: [AssetsOnProjectsScalarWhereInput!]
  NOT: [AssetsOnProjectsScalarWhereInput!]
  OR: [AssetsOnProjectsScalarWhereInput!]
  assetId: StringFilter
  createdAt: DateTimeFilter
  projectId: StringFilter
}

input AssetsOnProjectsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input AssetsOnProjectsUpdateManyWithWhereWithoutAssetInput {
  data: AssetsOnProjectsUpdateManyMutationInput!
  where: AssetsOnProjectsScalarWhereInput!
}

input AssetsOnProjectsUpdateManyWithWhereWithoutProjectInput {
  data: AssetsOnProjectsUpdateManyMutationInput!
  where: AssetsOnProjectsScalarWhereInput!
}

input AssetsOnProjectsUpdateManyWithoutAssetInput {
  connect: [AssetsOnProjectsWhereUniqueInput!]
  connectOrCreate: [AssetsOnProjectsCreateOrConnectWithoutAssetInput!]
  create: [AssetsOnProjectsCreateWithoutAssetInput!]
  delete: [AssetsOnProjectsWhereUniqueInput!]
  deleteMany: [AssetsOnProjectsScalarWhereInput!]
  disconnect: [AssetsOnProjectsWhereUniqueInput!]
  set: [AssetsOnProjectsWhereUniqueInput!]
  update: [AssetsOnProjectsUpdateWithWhereUniqueWithoutAssetInput!]
  updateMany: [AssetsOnProjectsUpdateManyWithWhereWithoutAssetInput!]
  upsert: [AssetsOnProjectsUpsertWithWhereUniqueWithoutAssetInput!]
}

input AssetsOnProjectsUpdateManyWithoutProjectInput {
  connect: [AssetsOnProjectsWhereUniqueInput!]
  connectOrCreate: [AssetsOnProjectsCreateOrConnectWithoutProjectInput!]
  create: [AssetsOnProjectsCreateWithoutProjectInput!]
  delete: [AssetsOnProjectsWhereUniqueInput!]
  deleteMany: [AssetsOnProjectsScalarWhereInput!]
  disconnect: [AssetsOnProjectsWhereUniqueInput!]
  set: [AssetsOnProjectsWhereUniqueInput!]
  update: [AssetsOnProjectsUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [AssetsOnProjectsUpdateManyWithWhereWithoutProjectInput!]
  upsert: [AssetsOnProjectsUpsertWithWhereUniqueWithoutProjectInput!]
}

input AssetsOnProjectsUpdateWithWhereUniqueWithoutAssetInput {
  data: AssetsOnProjectsUpdateWithoutAssetInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsUpdateWithWhereUniqueWithoutProjectInput {
  data: AssetsOnProjectsUpdateWithoutProjectInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsUpdateWithoutAssetInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutAssetsInput
}

input AssetsOnProjectsUpdateWithoutProjectInput {
  asset: AssetUpdateOneRequiredWithoutUsedInProjectsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input AssetsOnProjectsUpsertWithWhereUniqueWithoutAssetInput {
  create: AssetsOnProjectsCreateWithoutAssetInput!
  update: AssetsOnProjectsUpdateWithoutAssetInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsUpsertWithWhereUniqueWithoutProjectInput {
  create: AssetsOnProjectsCreateWithoutProjectInput!
  update: AssetsOnProjectsUpdateWithoutProjectInput!
  where: AssetsOnProjectsWhereUniqueInput!
}

input AssetsOnProjectsWhereInput {
  AND: [AssetsOnProjectsWhereInput!]
  NOT: [AssetsOnProjectsWhereInput!]
  OR: [AssetsOnProjectsWhereInput!]
  asset: AssetRelationFilter
  assetId: StringFilter
  createdAt: DateTimeFilter
  project: ProjectRelationFilter
  projectId: StringFilter
}

input AssetsOnProjectsWhereUniqueInput {
  assetId_projectId: AssetsOnProjectsAssetIdProjectIdCompoundUniqueInput
}

type Band {
  createdAt: Timestamp!
  createdBy: User!
  id: String!
  isPublic: Boolean!
  members(cursor: UsersOnBandsWhereUniqueInput, distinct: [UsersOnBandsScalarFieldEnum!], orderBy: [UsersOnBandsOrderByInput!], skip: Int, take: Int, where: UsersOnBandsWhereInput): [UsersOnBands!]!
  name: String!
  updatedAt: Timestamp!
  userId: String!
}

type BandCountAggregate {
  _all: Int!
  createdAt: Int
  id: Int
  isPublic: Int
  name: Int
  updatedAt: Int
  userId: Int
}

input BandCreateInput {
  createdAt: Timestamp
  createdBy: UserCreateNestedOneWithoutOwnsBandsInput!
  id: String
  isPublic: Boolean
  members: UsersOnBandsCreateNestedManyWithoutBandInput
  name: String!
  updatedAt: Timestamp
}

input BandCreateNestedManyWithoutCreatedByInput {
  connect: [BandWhereUniqueInput!]
  connectOrCreate: [BandCreateOrConnectWithoutCreatedByInput!]
  create: [BandCreateWithoutCreatedByInput!]
}

input BandCreateNestedOneWithoutMembersInput {
  connect: BandWhereUniqueInput
  connectOrCreate: BandCreateOrConnectWithoutMembersInput
  create: BandCreateWithoutMembersInput
}

input BandCreateOrConnectWithoutCreatedByInput {
  create: BandCreateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandCreateOrConnectWithoutMembersInput {
  create: BandCreateWithoutMembersInput!
  where: BandWhereUniqueInput!
}

input BandCreateWithoutCreatedByInput {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  members: UsersOnBandsCreateNestedManyWithoutBandInput
  name: String!
  updatedAt: Timestamp
}

input BandCreateWithoutMembersInput {
  createdAt: Timestamp
  createdBy: UserCreateNestedOneWithoutOwnsBandsInput!
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: Timestamp
}

input BandListRelationFilter {
  every: BandWhereInput
  none: BandWhereInput
  some: BandWhereInput
}

type BandMaxAggregate {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  name: String
  updatedAt: Timestamp
  userId: String
}

type BandMinAggregate {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  name: String
  updatedAt: Timestamp
  userId: String
}

input BandOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BandRelationFilter {
  is: BandWhereInput
  isNot: BandWhereInput
}

enum BandScalarFieldEnum {
  createdAt
  id
  isPublic
  name
  updatedAt
  userId
}

input BandScalarWhereInput {
  AND: [BandScalarWhereInput!]
  NOT: [BandScalarWhereInput!]
  OR: [BandScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BandUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutOwnsBandsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  members: UsersOnBandsUpdateManyWithoutBandInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateManyWithWhereWithoutCreatedByInput {
  data: BandUpdateManyMutationInput!
  where: BandScalarWhereInput!
}

input BandUpdateManyWithoutCreatedByInput {
  connect: [BandWhereUniqueInput!]
  connectOrCreate: [BandCreateOrConnectWithoutCreatedByInput!]
  create: [BandCreateWithoutCreatedByInput!]
  delete: [BandWhereUniqueInput!]
  deleteMany: [BandScalarWhereInput!]
  disconnect: [BandWhereUniqueInput!]
  set: [BandWhereUniqueInput!]
  update: [BandUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BandUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [BandUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BandUpdateOneRequiredWithoutMembersInput {
  connect: BandWhereUniqueInput
  connectOrCreate: BandCreateOrConnectWithoutMembersInput
  create: BandCreateWithoutMembersInput
  update: BandUpdateWithoutMembersInput
  upsert: BandUpsertWithoutMembersInput
}

input BandUpdateWithWhereUniqueWithoutCreatedByInput {
  data: BandUpdateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  members: UsersOnBandsUpdateManyWithoutBandInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateWithoutMembersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutOwnsBandsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpsertWithWhereUniqueWithoutCreatedByInput {
  create: BandCreateWithoutCreatedByInput!
  update: BandUpdateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandUpsertWithoutMembersInput {
  create: BandCreateWithoutMembersInput!
  update: BandUpdateWithoutMembersInput!
}

input BandWhereInput {
  AND: [BandWhereInput!]
  NOT: [BandWhereInput!]
  OR: [BandWhereInput!]
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  id: StringFilter
  isPublic: BoolFilter
  members: UsersOnBandsListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BandWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Comment {
  author: User!
  authorId: String!
  commentCount: Int
  createdAt: Timestamp!
  feedItem: FeedItem
  feedItemId: String
  id: String!
  isMeLiking: Boolean
  likeCount: Int
  likes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]!
  parentComment: Comment
  parentCommentId: String
  subComments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  text: String!
  updatedAt: Timestamp!
}

type CommentCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  feedItemId: Int
  id: Int
  parentCommentId: Int
  text: Int
  updatedAt: Int
}

input CommentCreateInput {
  author: UserCreateNestedOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateNestedManyWithoutCommentInput
  parentComment: CommentCreateNestedOneWithoutSubCommentsInput
  subComments: CommentCreateNestedManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateNestedManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutFeedItemInput!]
  create: [CommentCreateWithoutFeedItemInput!]
}

input CommentCreateNestedManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
}

input CommentCreateNestedOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutLikesInput
  create: CommentCreateWithoutLikesInput
}

input CommentCreateNestedOneWithoutSubCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutSubCommentsInput
  create: CommentCreateWithoutSubCommentsInput
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutFeedItemInput {
  create: CommentCreateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutSubCommentsInput {
  create: CommentCreateWithoutSubCommentsInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateNestedManyWithoutCommentInput
  parentComment: CommentCreateNestedOneWithoutSubCommentsInput
  subComments: CommentCreateNestedManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutFeedItemInput {
  author: UserCreateNestedOneWithoutCommentInput!
  createdAt: Timestamp
  id: String
  likes: CommentLikeCreateNestedManyWithoutCommentInput
  parentComment: CommentCreateNestedOneWithoutSubCommentsInput
  subComments: CommentCreateNestedManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutLikesInput {
  author: UserCreateNestedOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutCommentsInput
  id: String
  parentComment: CommentCreateNestedOneWithoutSubCommentsInput
  subComments: CommentCreateNestedManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutParentCommentInput {
  author: UserCreateNestedOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateNestedManyWithoutCommentInput
  subComments: CommentCreateNestedManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutSubCommentsInput {
  author: UserCreateNestedOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateNestedManyWithoutCommentInput
  parentComment: CommentCreateNestedOneWithoutSubCommentsInput
  text: String!
  updatedAt: Timestamp
}

type CommentLike {
  comment: Comment!
  commentId: String!
  createdAt: Timestamp!
  user: User!
  userId: String!
}

type CommentLikeCountAggregate {
  _all: Int!
  commentId: Int
  createdAt: Int
  userId: Int
}

input CommentLikeCreateInput {
  comment: CommentCreateNestedOneWithoutLikesInput!
  createdAt: Timestamp
  user: UserCreateNestedOneWithoutCommentLikeInput!
}

input CommentLikeCreateNestedManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutCommentInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
}

input CommentLikeCreateNestedManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutUserInput!]
  create: [CommentLikeCreateWithoutUserInput!]
}

input CommentLikeCreateOrConnectWithoutCommentInput {
  create: CommentLikeCreateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeCreateOrConnectWithoutUserInput {
  create: CommentLikeCreateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeCreateWithoutCommentInput {
  createdAt: Timestamp
  user: UserCreateNestedOneWithoutCommentLikeInput!
}

input CommentLikeCreateWithoutUserInput {
  comment: CommentCreateNestedOneWithoutLikesInput!
  createdAt: Timestamp
}

input CommentLikeListRelationFilter {
  every: CommentLikeWhereInput
  none: CommentLikeWhereInput
  some: CommentLikeWhereInput
}

type CommentLikeMaxAggregate {
  commentId: String
  createdAt: Timestamp
  userId: String
}

type CommentLikeMinAggregate {
  commentId: String
  createdAt: Timestamp
  userId: String
}

input CommentLikeOrderByInput {
  commentId: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

enum CommentLikeScalarFieldEnum {
  commentId
  createdAt
  userId
}

input CommentLikeScalarWhereInput {
  AND: [CommentLikeScalarWhereInput!]
  NOT: [CommentLikeScalarWhereInput!]
  OR: [CommentLikeScalarWhereInput!]
  commentId: StringFilter
  createdAt: DateTimeFilter
  userId: StringFilter
}

input CommentLikeUpdateInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateManyWithWhereWithoutCommentInput {
  data: CommentLikeUpdateManyMutationInput!
  where: CommentLikeScalarWhereInput!
}

input CommentLikeUpdateManyWithWhereWithoutUserInput {
  data: CommentLikeUpdateManyMutationInput!
  where: CommentLikeScalarWhereInput!
}

input CommentLikeUpdateManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutCommentInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentLikeUpdateManyWithWhereWithoutCommentInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentLikeUpdateManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutUserInput!]
  create: [CommentLikeCreateWithoutUserInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentLikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  data: CommentLikeUpdateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpdateWithWhereUniqueWithoutUserInput {
  data: CommentLikeUpdateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpdateWithoutCommentInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateWithoutUserInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  create: CommentLikeCreateWithoutCommentInput!
  update: CommentLikeUpdateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutUserInput {
  create: CommentLikeCreateWithoutUserInput!
  update: CommentLikeUpdateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUserIdCommentIdCompoundUniqueInput {
  commentId: String!
  userId: String!
}

input CommentLikeWhereInput {
  AND: [CommentLikeWhereInput!]
  NOT: [CommentLikeWhereInput!]
  OR: [CommentLikeWhereInput!]
  comment: CommentRelationFilter
  commentId: StringFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input CommentLikeWhereUniqueInput {
  userId_commentId: CommentLikeUserIdCommentIdCompoundUniqueInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  authorId: String
  createdAt: Timestamp
  feedItemId: String
  id: String
  parentCommentId: String
  text: String
  updatedAt: Timestamp
}

type CommentMinAggregate {
  authorId: String
  createdAt: Timestamp
  feedItemId: String
  id: String
  parentCommentId: String
  text: String
  updatedAt: Timestamp
}

input CommentOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  parentCommentId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

enum CommentScalarFieldEnum {
  authorId
  createdAt
  feedItemId
  id
  parentCommentId
  text
  updatedAt
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  feedItemId: StringNullableFilter
  id: StringFilter
  parentCommentId: StringNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutFeedItemInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentCommentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutFeedItemInput!]
  create: [CommentCreateWithoutFeedItemInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutFeedItemInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input CommentUpdateManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentCommentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentCommentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentCommentInput!]
}

input CommentUpdateOneRequiredWithoutLikesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutLikesInput
  create: CommentCreateWithoutLikesInput
  update: CommentUpdateWithoutLikesInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateOneWithoutSubCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutSubCommentsInput
  create: CommentCreateWithoutSubCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutSubCommentsInput
  upsert: CommentUpsertWithoutSubCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutFeedItemInput {
  data: CommentUpdateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  data: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutFeedItemInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutLikesInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutParentCommentInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutSubCommentsInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutFeedItemInput {
  create: CommentCreateWithoutFeedItemInput!
  update: CommentUpdateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  update: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  update: CommentUpdateWithoutLikesInput!
}

input CommentUpsertWithoutSubCommentsInput {
  create: CommentCreateWithoutSubCommentsInput!
  update: CommentUpdateWithoutSubCommentsInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringNullableFilter
  id: StringFilter
  likes: CommentLikeListRelationFilter
  parentComment: CommentRelationFilter
  parentCommentId: StringNullableFilter
  subComments: CommentListRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

type EarlyAccessCode {
  claimedBy: User
  code: String!
  createdAt: Timestamp!
  isValid: Boolean!
  updatedAt: Timestamp!
  userId: String
}

input EarlyAccessCodeCreateNestedManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  connectOrCreate: [EarlyAccessCodeCreateOrConnectWithoutClaimedByInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
}

input EarlyAccessCodeCreateOrConnectWithoutClaimedByInput {
  create: EarlyAccessCodeCreateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeCreateWithoutClaimedByInput {
  code: String!
  createdAt: Timestamp
  id: String
  isValid: Boolean
  updatedAt: Timestamp
}

input EarlyAccessCodeListRelationFilter {
  every: EarlyAccessCodeWhereInput
  none: EarlyAccessCodeWhereInput
  some: EarlyAccessCodeWhereInput
}

input EarlyAccessCodeOrderByInput {
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isValid: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum EarlyAccessCodeScalarFieldEnum {
  code
  createdAt
  id
  isValid
  updatedAt
  userId
}

input EarlyAccessCodeScalarWhereInput {
  AND: [EarlyAccessCodeScalarWhereInput!]
  NOT: [EarlyAccessCodeScalarWhereInput!]
  OR: [EarlyAccessCodeScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpdateManyWithWhereWithoutClaimedByInput {
  data: EarlyAccessCodeUpdateManyMutationInput!
  where: EarlyAccessCodeScalarWhereInput!
}

input EarlyAccessCodeUpdateManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  connectOrCreate: [EarlyAccessCodeCreateOrConnectWithoutClaimedByInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
  delete: [EarlyAccessCodeWhereUniqueInput!]
  deleteMany: [EarlyAccessCodeScalarWhereInput!]
  disconnect: [EarlyAccessCodeWhereUniqueInput!]
  set: [EarlyAccessCodeWhereUniqueInput!]
  update: [EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput!]
  updateMany: [EarlyAccessCodeUpdateManyWithWhereWithoutClaimedByInput!]
  upsert: [EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput!]
}

input EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput {
  data: EarlyAccessCodeUpdateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeUpdateWithoutClaimedByInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput {
  create: EarlyAccessCodeCreateWithoutClaimedByInput!
  update: EarlyAccessCodeUpdateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeWhereInput {
  AND: [EarlyAccessCodeWhereInput!]
  NOT: [EarlyAccessCodeWhereInput!]
  OR: [EarlyAccessCodeWhereInput!]
  claimedBy: UserRelationFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeWhereUniqueInput {
  code: String
  id: String
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type FeedItem {
  author: User!
  authorId: String!
  commentCount: Int
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: Timestamp!
  id: String!
  isMeLiking: Boolean
  isPublished: Boolean!
  likeCount: Int
  likes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]!
  mixdown: Mixdown
  mixdownId: String
  publishAt: Timestamp
  revisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]!
  text: String
  updatedAt: Timestamp!
}

type FeedItemCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  id: Int
  isPublished: Int
  mixdownId: Int
  publishAt: Int
  text: Int
  updatedAt: Int
}

input FeedItemCreateInput {
  author: UserCreateNestedOneWithoutFeedInput!
  comments: CommentCreateNestedManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateNestedManyWithoutFeedItemInput
  mixdown: MixdownCreateNestedOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateNestedManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateNestedManyWithoutAuthorInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutAuthorInput!]
  create: [FeedItemCreateWithoutAuthorInput!]
}

input FeedItemCreateNestedManyWithoutMixdownInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutMixdownInput!]
  create: [FeedItemCreateWithoutMixdownInput!]
}

input FeedItemCreateNestedOneWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutCommentsInput
  create: FeedItemCreateWithoutCommentsInput
}

input FeedItemCreateNestedOneWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutLikesInput
  create: FeedItemCreateWithoutLikesInput
}

input FeedItemCreateNestedOneWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutRevisionsInput
  create: FeedItemCreateWithoutRevisionsInput
}

input FeedItemCreateOrConnectWithoutAuthorInput {
  create: FeedItemCreateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutCommentsInput {
  create: FeedItemCreateWithoutCommentsInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutLikesInput {
  create: FeedItemCreateWithoutLikesInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutMixdownInput {
  create: FeedItemCreateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutRevisionsInput {
  create: FeedItemCreateWithoutRevisionsInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateWithoutAuthorInput {
  comments: CommentCreateNestedManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateNestedManyWithoutFeedItemInput
  mixdown: MixdownCreateNestedOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateNestedManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutFeedInput!
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateNestedManyWithoutFeedItemInput
  mixdown: MixdownCreateNestedOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateNestedManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutLikesInput {
  author: UserCreateNestedOneWithoutFeedInput!
  comments: CommentCreateNestedManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdown: MixdownCreateNestedOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateNestedManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutMixdownInput {
  author: UserCreateNestedOneWithoutFeedInput!
  comments: CommentCreateNestedManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateNestedManyWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateNestedManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutRevisionsInput {
  author: UserCreateNestedOneWithoutFeedInput!
  comments: CommentCreateNestedManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateNestedManyWithoutFeedItemInput
  mixdown: MixdownCreateNestedOneWithoutFeedItemInput
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

type FeedItemLike {
  createdAt: Timestamp!
  feedItem: FeedItem!
  feedItemId: String!
  user: User!
  userId: String!
}

type FeedItemLikeCountAggregate {
  _all: Int!
  createdAt: Int
  feedItemId: Int
  userId: Int
}

input FeedItemLikeCreateInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutLikesInput!
  user: UserCreateNestedOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateNestedManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutFeedItemInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
}

input FeedItemLikeCreateNestedManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutUserInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
}

input FeedItemLikeCreateOrConnectWithoutFeedItemInput {
  create: FeedItemLikeCreateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeCreateOrConnectWithoutUserInput {
  create: FeedItemLikeCreateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeCreateWithoutFeedItemInput {
  createdAt: Timestamp
  user: UserCreateNestedOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateWithoutUserInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateNestedOneWithoutLikesInput!
}

input FeedItemLikeListRelationFilter {
  every: FeedItemLikeWhereInput
  none: FeedItemLikeWhereInput
  some: FeedItemLikeWhereInput
}

type FeedItemLikeMaxAggregate {
  createdAt: Timestamp
  feedItemId: String
  userId: String
}

type FeedItemLikeMinAggregate {
  createdAt: Timestamp
  feedItemId: String
  userId: String
}

input FeedItemLikeOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  userId: SortOrder
}

enum FeedItemLikeScalarFieldEnum {
  createdAt
  feedItemId
  userId
}

input FeedItemLikeScalarWhereInput {
  AND: [FeedItemLikeScalarWhereInput!]
  NOT: [FeedItemLikeScalarWhereInput!]
  OR: [FeedItemLikeScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  userId: StringFilter
}

input FeedItemLikeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemLikeUpdateManyWithWhereWithoutFeedItemInput {
  data: FeedItemLikeUpdateManyMutationInput!
  where: FeedItemLikeScalarWhereInput!
}

input FeedItemLikeUpdateManyWithWhereWithoutUserInput {
  data: FeedItemLikeUpdateManyMutationInput!
  where: FeedItemLikeScalarWhereInput!
}

input FeedItemLikeUpdateManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutFeedItemInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereWithoutFeedItemInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input FeedItemLikeUpdateManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutUserInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput {
  data: FeedItemLikeUpdateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpdateWithWhereUniqueWithoutUserInput {
  data: FeedItemLikeUpdateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpdateWithoutFeedItemInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
}

input FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput {
  create: FeedItemLikeCreateWithoutFeedItemInput!
  update: FeedItemLikeUpdateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpsertWithWhereUniqueWithoutUserInput {
  create: FeedItemLikeCreateWithoutUserInput!
  update: FeedItemLikeUpdateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUserIdFeedItemIdCompoundUniqueInput {
  feedItemId: String!
  userId: String!
}

input FeedItemLikeWhereInput {
  AND: [FeedItemLikeWhereInput!]
  NOT: [FeedItemLikeWhereInput!]
  OR: [FeedItemLikeWhereInput!]
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input FeedItemLikeWhereUniqueInput {
  userId_feedItemId: FeedItemLikeUserIdFeedItemIdCompoundUniqueInput
}

input FeedItemListRelationFilter {
  every: FeedItemWhereInput
  none: FeedItemWhereInput
  some: FeedItemWhereInput
}

type FeedItemMaxAggregate {
  authorId: String
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdownId: String
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

type FeedItemMinAggregate {
  authorId: String
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdownId: String
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

input FeedItemOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublished: SortOrder
  mixdownId: SortOrder
  publishAt: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input FeedItemRelationFilter {
  is: FeedItemWhereInput
  isNot: FeedItemWhereInput
}

type FeedItemRevision {
  createdAt: Timestamp!
  feedItemId: String!
  id: String!
  parentItem: FeedItem!
  text: String!
  updatedAt: Timestamp!
}

type FeedItemRevisionCountAggregate {
  _all: Int!
  createdAt: Int
  feedItemId: Int
  id: Int
  text: Int
  updatedAt: Int
}

input FeedItemRevisionCreateInput {
  createdAt: Timestamp
  id: String
  parentItem: FeedItemCreateNestedOneWithoutRevisionsInput!
  text: String!
  updatedAt: Timestamp
}

input FeedItemRevisionCreateNestedManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  connectOrCreate: [FeedItemRevisionCreateOrConnectWithoutParentItemInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
}

input FeedItemRevisionCreateOrConnectWithoutParentItemInput {
  create: FeedItemRevisionCreateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionCreateWithoutParentItemInput {
  createdAt: Timestamp
  id: String
  text: String!
  updatedAt: Timestamp
}

input FeedItemRevisionListRelationFilter {
  every: FeedItemRevisionWhereInput
  none: FeedItemRevisionWhereInput
  some: FeedItemRevisionWhereInput
}

type FeedItemRevisionMaxAggregate {
  createdAt: Timestamp
  feedItemId: String
  id: String
  text: String
  updatedAt: Timestamp
}

type FeedItemRevisionMinAggregate {
  createdAt: Timestamp
  feedItemId: String
  id: String
  text: String
  updatedAt: Timestamp
}

input FeedItemRevisionOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

enum FeedItemRevisionScalarFieldEnum {
  createdAt
  feedItemId
  id
  text
  updatedAt
}

input FeedItemRevisionScalarWhereInput {
  AND: [FeedItemRevisionScalarWhereInput!]
  NOT: [FeedItemRevisionScalarWhereInput!]
  OR: [FeedItemRevisionScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentItem: FeedItemUpdateOneRequiredWithoutRevisionsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyWithWhereWithoutParentItemInput {
  data: FeedItemRevisionUpdateManyMutationInput!
  where: FeedItemRevisionScalarWhereInput!
}

input FeedItemRevisionUpdateManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  connectOrCreate: [FeedItemRevisionCreateOrConnectWithoutParentItemInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
  delete: [FeedItemRevisionWhereUniqueInput!]
  deleteMany: [FeedItemRevisionScalarWhereInput!]
  disconnect: [FeedItemRevisionWhereUniqueInput!]
  set: [FeedItemRevisionWhereUniqueInput!]
  update: [FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput!]
  updateMany: [FeedItemRevisionUpdateManyWithWhereWithoutParentItemInput!]
  upsert: [FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput!]
}

input FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput {
  data: FeedItemRevisionUpdateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionUpdateWithoutParentItemInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput {
  create: FeedItemRevisionCreateWithoutParentItemInput!
  update: FeedItemRevisionUpdateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionWhereInput {
  AND: [FeedItemRevisionWhereInput!]
  NOT: [FeedItemRevisionWhereInput!]
  OR: [FeedItemRevisionWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  parentItem: FeedItemRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionWhereUniqueInput {
  id: String
}

enum FeedItemScalarFieldEnum {
  authorId
  createdAt
  id
  isPublished
  mixdownId
  publishAt
  text
  updatedAt
}

input FeedItemScalarWhereInput {
  AND: [FeedItemScalarWhereInput!]
  NOT: [FeedItemScalarWhereInput!]
  OR: [FeedItemScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  mixdownId: StringNullableFilter
  publishAt: DateTimeNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FeedItemUpdateInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyWithWhereWithoutAuthorInput {
  data: FeedItemUpdateManyMutationInput!
  where: FeedItemScalarWhereInput!
}

input FeedItemUpdateManyWithWhereWithoutMixdownInput {
  data: FeedItemUpdateManyMutationInput!
  where: FeedItemScalarWhereInput!
}

input FeedItemUpdateManyWithoutAuthorInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutAuthorInput!]
  create: [FeedItemCreateWithoutAuthorInput!]
  delete: [FeedItemWhereUniqueInput!]
  deleteMany: [FeedItemScalarWhereInput!]
  disconnect: [FeedItemWhereUniqueInput!]
  set: [FeedItemWhereUniqueInput!]
  update: [FeedItemUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [FeedItemUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [FeedItemUpsertWithWhereUniqueWithoutAuthorInput!]
}

input FeedItemUpdateManyWithoutMixdownInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutMixdownInput!]
  create: [FeedItemCreateWithoutMixdownInput!]
  delete: [FeedItemWhereUniqueInput!]
  deleteMany: [FeedItemScalarWhereInput!]
  disconnect: [FeedItemWhereUniqueInput!]
  set: [FeedItemWhereUniqueInput!]
  update: [FeedItemUpdateWithWhereUniqueWithoutMixdownInput!]
  updateMany: [FeedItemUpdateManyWithWhereWithoutMixdownInput!]
  upsert: [FeedItemUpsertWithWhereUniqueWithoutMixdownInput!]
}

input FeedItemUpdateOneRequiredWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutLikesInput
  create: FeedItemCreateWithoutLikesInput
  update: FeedItemUpdateWithoutLikesInput
  upsert: FeedItemUpsertWithoutLikesInput
}

input FeedItemUpdateOneRequiredWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutRevisionsInput
  create: FeedItemCreateWithoutRevisionsInput
  update: FeedItemUpdateWithoutRevisionsInput
  upsert: FeedItemUpsertWithoutRevisionsInput
}

input FeedItemUpdateOneWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutCommentsInput
  create: FeedItemCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: FeedItemUpdateWithoutCommentsInput
  upsert: FeedItemUpsertWithoutCommentsInput
}

input FeedItemUpdateWithWhereUniqueWithoutAuthorInput {
  data: FeedItemUpdateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpdateWithWhereUniqueWithoutMixdownInput {
  data: FeedItemUpdateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpdateWithoutAuthorInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutLikesInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutMixdownInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutRevisionsInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpsertWithWhereUniqueWithoutAuthorInput {
  create: FeedItemCreateWithoutAuthorInput!
  update: FeedItemUpdateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpsertWithWhereUniqueWithoutMixdownInput {
  create: FeedItemCreateWithoutMixdownInput!
  update: FeedItemUpdateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpsertWithoutCommentsInput {
  create: FeedItemCreateWithoutCommentsInput!
  update: FeedItemUpdateWithoutCommentsInput!
}

input FeedItemUpsertWithoutLikesInput {
  create: FeedItemCreateWithoutLikesInput!
  update: FeedItemUpdateWithoutLikesInput!
}

input FeedItemUpsertWithoutRevisionsInput {
  create: FeedItemCreateWithoutRevisionsInput!
  update: FeedItemUpdateWithoutRevisionsInput!
}

input FeedItemWhereInput {
  AND: [FeedItemWhereInput!]
  NOT: [FeedItemWhereInput!]
  OR: [FeedItemWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  likes: FeedItemLikeListRelationFilter
  mixdown: MixdownRelationFilter
  mixdownId: StringNullableFilter
  publishAt: DateTimeNullableFilter
  revisions: FeedItemRevisionListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FeedItemWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Issue {
  createdAt: Timestamp!
  description: String!
  id: String!
  resolved: Boolean!
  screenshotIds: [String!]!
  userId: String
}

type IssueCountAggregate {
  _all: Int!
  createdAt: Int
  description: Int
  id: Int
  resolved: Int
  screenshotIds: Int
  userId: Int
}

input IssueCreateInput {
  createdAt: Timestamp
  createdBy: UserCreateNestedOneWithoutIssueInput
  description: String!
  id: String
  resolved: Boolean
  screenshotIds: IssueCreatescreenshotIdsInput
}

input IssueCreateNestedManyWithoutCreatedByInput {
  connect: [IssueWhereUniqueInput!]
  connectOrCreate: [IssueCreateOrConnectWithoutCreatedByInput!]
  create: [IssueCreateWithoutCreatedByInput!]
}

input IssueCreateOrConnectWithoutCreatedByInput {
  create: IssueCreateWithoutCreatedByInput!
  where: IssueWhereUniqueInput!
}

input IssueCreateWithoutCreatedByInput {
  createdAt: Timestamp
  description: String!
  id: String
  resolved: Boolean
  screenshotIds: IssueCreatescreenshotIdsInput
}

input IssueCreatescreenshotIdsInput {
  set: [String!]!
}

input IssueListRelationFilter {
  every: IssueWhereInput
  none: IssueWhereInput
  some: IssueWhereInput
}

type IssueMaxAggregate {
  createdAt: Timestamp
  description: String
  id: String
  resolved: Boolean
  userId: String
}

type IssueMinAggregate {
  createdAt: Timestamp
  description: String
  id: String
  resolved: Boolean
  userId: String
}

input IssueOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  resolved: SortOrder
  screenshotIds: SortOrder
  userId: SortOrder
}

enum IssueScalarFieldEnum {
  createdAt
  description
  id
  resolved
  screenshotIds
  userId
}

input IssueScalarWhereInput {
  AND: [IssueScalarWhereInput!]
  NOT: [IssueScalarWhereInput!]
  OR: [IssueScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  resolved: BoolFilter
  screenshotIds: StringNullableListFilter
  userId: StringNullableFilter
}

input IssueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutIssueInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  screenshotIds: IssueUpdatescreenshotIdsInput
}

input IssueUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  screenshotIds: IssueUpdatescreenshotIdsInput
}

input IssueUpdateManyWithWhereWithoutCreatedByInput {
  data: IssueUpdateManyMutationInput!
  where: IssueScalarWhereInput!
}

input IssueUpdateManyWithoutCreatedByInput {
  connect: [IssueWhereUniqueInput!]
  connectOrCreate: [IssueCreateOrConnectWithoutCreatedByInput!]
  create: [IssueCreateWithoutCreatedByInput!]
  delete: [IssueWhereUniqueInput!]
  deleteMany: [IssueScalarWhereInput!]
  disconnect: [IssueWhereUniqueInput!]
  set: [IssueWhereUniqueInput!]
  update: [IssueUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [IssueUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [IssueUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input IssueUpdateWithWhereUniqueWithoutCreatedByInput {
  data: IssueUpdateWithoutCreatedByInput!
  where: IssueWhereUniqueInput!
}

input IssueUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  screenshotIds: IssueUpdatescreenshotIdsInput
}

input IssueUpdatescreenshotIdsInput {
  set: [String!]!
}

input IssueUpsertWithWhereUniqueWithoutCreatedByInput {
  create: IssueCreateWithoutCreatedByInput!
  update: IssueUpdateWithoutCreatedByInput!
  where: IssueWhereUniqueInput!
}

input IssueWhereInput {
  AND: [IssueWhereInput!]
  NOT: [IssueWhereInput!]
  OR: [IssueWhereInput!]
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  description: StringFilter
  id: StringFilter
  resolved: BoolFilter
  screenshotIds: StringNullableListFilter
  userId: StringNullableFilter
}

input IssueWhereUniqueInput {
  id: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSON
  not: JSON
}

type Mixdown {
  FeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]!
  assetId: String!
  audio: Asset!
  createdAt: Timestamp!
  id: String!
  isPusblished: Boolean
  listens: Int!
  name: String
  project: Project!
  projectId: String!
  triggerdBy: User!
  updatedAt: Timestamp!
  userId: String!
  version: Int!
}

type MixdownAvgAggregate {
  listens: Float!
  version: Float!
}

type MixdownCountAggregate {
  _all: Int!
  assetId: Int
  createdAt: Int
  id: Int
  isPusblished: Int
  listens: Int!
  name: Int
  projectId: Int
  updatedAt: Int
  userId: Int
  version: Int!
}

input MixdownCreateInput {
  FeedItem: FeedItemCreateNestedManyWithoutMixdownInput
  audio: AssetCreateNestedOneWithoutMixdownInput!
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateNestedOneWithoutMixdownsInput!
  triggerdBy: UserCreateNestedOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateNestedManyWithoutAudioInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutAudioInput!]
  create: [MixdownCreateWithoutAudioInput!]
}

input MixdownCreateNestedManyWithoutProjectInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutProjectInput!]
  create: [MixdownCreateWithoutProjectInput!]
}

input MixdownCreateNestedManyWithoutTriggerdByInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutTriggerdByInput!]
  create: [MixdownCreateWithoutTriggerdByInput!]
}

input MixdownCreateNestedOneWithoutFeedItemInput {
  connect: MixdownWhereUniqueInput
  connectOrCreate: MixdownCreateOrConnectWithoutFeedItemInput
  create: MixdownCreateWithoutFeedItemInput
}

input MixdownCreateOrConnectWithoutAudioInput {
  create: MixdownCreateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithoutFeedItemInput {
  create: MixdownCreateWithoutFeedItemInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithoutProjectInput {
  create: MixdownCreateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithoutTriggerdByInput {
  create: MixdownCreateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateWithoutAudioInput {
  FeedItem: FeedItemCreateNestedManyWithoutMixdownInput
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateNestedOneWithoutMixdownsInput!
  triggerdBy: UserCreateNestedOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutFeedItemInput {
  audio: AssetCreateNestedOneWithoutMixdownInput!
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateNestedOneWithoutMixdownsInput!
  triggerdBy: UserCreateNestedOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutProjectInput {
  FeedItem: FeedItemCreateNestedManyWithoutMixdownInput
  audio: AssetCreateNestedOneWithoutMixdownInput!
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  triggerdBy: UserCreateNestedOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutTriggerdByInput {
  FeedItem: FeedItemCreateNestedManyWithoutMixdownInput
  audio: AssetCreateNestedOneWithoutMixdownInput!
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateNestedOneWithoutMixdownsInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownListRelationFilter {
  every: MixdownWhereInput
  none: MixdownWhereInput
  some: MixdownWhereInput
}

type MixdownMaxAggregate {
  assetId: String
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int!
  name: String
  projectId: String
  updatedAt: Timestamp
  userId: String
  version: Int!
}

type MixdownMinAggregate {
  assetId: String
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int!
  name: String
  projectId: String
  updatedAt: Timestamp
  userId: String
  version: Int!
}

input MixdownOrderByInput {
  assetId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPusblished: SortOrder
  listens: SortOrder
  name: SortOrder
  projectId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

input MixdownRelationFilter {
  is: MixdownWhereInput
  isNot: MixdownWhereInput
}

enum MixdownScalarFieldEnum {
  assetId
  createdAt
  id
  isPusblished
  listens
  name
  projectId
  updatedAt
  userId
  version
}

input MixdownScalarWhereInput {
  AND: [MixdownScalarWhereInput!]
  NOT: [MixdownScalarWhereInput!]
  OR: [MixdownScalarWhereInput!]
  assetId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPusblished: BoolNullableFilter
  listens: IntFilter
  name: StringNullableFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  version: IntFilter
}

type MixdownSumAggregate {
  listens: Int!
  version: Int!
}

input MixdownUpdateInput {
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  audio: AssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateManyWithWhereWithoutAudioInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateManyWithWhereWithoutProjectInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateManyWithWhereWithoutTriggerdByInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateManyWithoutAudioInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutAudioInput!]
  create: [MixdownCreateWithoutAudioInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutAudioInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutAudioInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutAudioInput!]
}

input MixdownUpdateManyWithoutProjectInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutProjectInput!]
  create: [MixdownCreateWithoutProjectInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutProjectInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutProjectInput!]
}

input MixdownUpdateManyWithoutTriggerdByInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutTriggerdByInput!]
  create: [MixdownCreateWithoutTriggerdByInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutTriggerdByInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutTriggerdByInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutTriggerdByInput!]
}

input MixdownUpdateOneWithoutFeedItemInput {
  connect: MixdownWhereUniqueInput
  connectOrCreate: MixdownCreateOrConnectWithoutFeedItemInput
  create: MixdownCreateWithoutFeedItemInput
  delete: Boolean
  disconnect: Boolean
  update: MixdownUpdateWithoutFeedItemInput
  upsert: MixdownUpsertWithoutFeedItemInput
}

input MixdownUpdateWithWhereUniqueWithoutAudioInput {
  data: MixdownUpdateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpdateWithWhereUniqueWithoutProjectInput {
  data: MixdownUpdateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpdateWithWhereUniqueWithoutTriggerdByInput {
  data: MixdownUpdateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpdateWithoutAudioInput {
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutFeedItemInput {
  audio: AssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutProjectInput {
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  audio: AssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutTriggerdByInput {
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  audio: AssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpsertWithWhereUniqueWithoutAudioInput {
  create: MixdownCreateWithoutAudioInput!
  update: MixdownUpdateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithWhereUniqueWithoutProjectInput {
  create: MixdownCreateWithoutProjectInput!
  update: MixdownUpdateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithWhereUniqueWithoutTriggerdByInput {
  create: MixdownCreateWithoutTriggerdByInput!
  update: MixdownUpdateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithoutFeedItemInput {
  create: MixdownCreateWithoutFeedItemInput!
  update: MixdownUpdateWithoutFeedItemInput!
}

input MixdownWhereInput {
  AND: [MixdownWhereInput!]
  FeedItem: FeedItemListRelationFilter
  NOT: [MixdownWhereInput!]
  OR: [MixdownWhereInput!]
  assetId: StringFilter
  audio: AssetRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPusblished: BoolNullableFilter
  listens: IntFilter
  name: StringNullableFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  triggerdBy: UserRelationFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  version: IntFilter
}

input MixdownWhereUniqueInput {
  id: String
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createBand(data: BandCreateInput!): Band!
  createComment(data: CommentCreateInput!): Comment!
  createCommentLike(data: CommentLikeCreateInput!): CommentLike!
  createFeedItem(data: FeedItemCreateInput!): FeedItem!
  createFeedItemLike(data: FeedItemLikeCreateInput!): FeedItemLike!
  createFeedItemRevision(data: FeedItemRevisionCreateInput!): FeedItemRevision!
  createIssue(data: IssueCreateInput!): Issue!
  createMixdown(data: MixdownCreateInput!): Mixdown!
  createProject(data: ProjectCreateInput!): Project!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  createUsersOnProjects(data: UsersOnProjectsCreateInput!): UsersOnProjects!
  createVersionInformation(data: VersionInformationCreateInput!): VersionInformation!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteBand(where: BandWhereUniqueInput!): Band
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCommentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  deleteFeedItem(where: FeedItemWhereUniqueInput!): FeedItem
  deleteFeedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  deleteFeedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  deleteIssue(where: IssueWhereUniqueInput!): Issue
  deleteManyAddress(where: AddressWhereInput): AffectedRowsOutput!
  deleteManyBand(where: BandWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyCommentLike(where: CommentLikeWhereInput): AffectedRowsOutput!
  deleteManyFeedItem(where: FeedItemWhereInput): AffectedRowsOutput!
  deleteManyFeedItemLike(where: FeedItemLikeWhereInput): AffectedRowsOutput!
  deleteManyFeedItemRevision(where: FeedItemRevisionWhereInput): AffectedRowsOutput!
  deleteManyIssue(where: IssueWhereInput): AffectedRowsOutput!
  deleteManyMixdown(where: MixdownWhereInput): AffectedRowsOutput!
  deleteManyProject(where: ProjectWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUsersOnProjects(where: UsersOnProjectsWhereInput): AffectedRowsOutput!
  deleteManyVersionInformation(where: VersionInformationWhereInput): AffectedRowsOutput!
  deleteMixdown(where: MixdownWhereUniqueInput!): Mixdown
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  deleteVersionInformation(where: VersionInformationWhereUniqueInput!): VersionInformation
  publishChange(authorId: String, changes: JSONObject!, date: Timestamp!, id: String!, projectId: String!): PublishProjectChangesArgs!
  signUpUser(data: UserSignUpInput!): User!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateBand(data: BandUpdateInput!, where: BandWhereUniqueInput!): Band
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCommentLike(data: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike
  updateFeedItem(data: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem
  updateFeedItemLike(data: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  updateFeedItemRevision(data: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  updateIssue(data: IssueUpdateInput!, where: IssueWhereUniqueInput!): Issue
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): AffectedRowsOutput!
  updateManyBand(data: BandUpdateManyMutationInput!, where: BandWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyCommentLike(data: CommentLikeUpdateManyMutationInput!, where: CommentLikeWhereInput): AffectedRowsOutput!
  updateManyFeedItem(data: FeedItemUpdateManyMutationInput!, where: FeedItemWhereInput): AffectedRowsOutput!
  updateManyFeedItemLike(data: FeedItemLikeUpdateManyMutationInput!, where: FeedItemLikeWhereInput): AffectedRowsOutput!
  updateManyFeedItemRevision(data: FeedItemRevisionUpdateManyMutationInput!, where: FeedItemRevisionWhereInput): AffectedRowsOutput!
  updateManyIssue(data: IssueUpdateManyMutationInput!, where: IssueWhereInput): AffectedRowsOutput!
  updateManyMixdown(data: MixdownUpdateManyMutationInput!, where: MixdownWhereInput): AffectedRowsOutput!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUsersOnProjects(data: UsersOnProjectsUpdateManyMutationInput!, where: UsersOnProjectsWhereInput): AffectedRowsOutput!
  updateManyVersionInformation(data: VersionInformationUpdateManyMutationInput!, where: VersionInformationWhereInput): AffectedRowsOutput!
  updateMixdown(data: MixdownUpdateInput!, where: MixdownWhereUniqueInput!): Mixdown
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUsersOnProjects(data: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  updateVersionInformation(data: VersionInformationUpdateInput!, where: VersionInformationWhereUniqueInput!): VersionInformation
  upsertAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertBand(create: BandCreateInput!, update: BandUpdateInput!, where: BandWhereUniqueInput!): Band!
  upsertComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertCommentLike(create: CommentLikeCreateInput!, update: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike!
  upsertFeedItem(create: FeedItemCreateInput!, update: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem!
  upsertFeedItemLike(create: FeedItemLikeCreateInput!, update: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike!
  upsertFeedItemRevision(create: FeedItemRevisionCreateInput!, update: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision!
  upsertIssue(create: IssueCreateInput!, update: IssueUpdateInput!, where: IssueWhereUniqueInput!): Issue!
  upsertMixdown(create: MixdownCreateInput!, update: MixdownUpdateInput!, where: MixdownWhereUniqueInput!): Mixdown!
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUsersOnProjects(create: UsersOnProjectsCreateInput!, update: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects!
  upsertVersionInformation(create: VersionInformationCreateInput!, update: VersionInformationUpdateInput!, where: VersionInformationWhereUniqueInput!): VersionInformation!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  assets(cursor: AssetsOnProjectsWhereUniqueInput, distinct: [AssetsOnProjectsScalarFieldEnum!], orderBy: [AssetsOnProjectsOrderByInput!], skip: Int, take: Int, where: AssetsOnProjectsWhereInput): [AssetsOnProjects!]!
  content: JSON!
  createdAt: Timestamp!
  id: String!
  isInitialized: Boolean!
  isPrivate: Boolean!
  members(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]!
  mixdowns(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]!
  name: String!
  owner: User!
  ownerId: String!
  updatedAt: Timestamp!
}

type ProjectCountAggregate {
  _all: Int!
  content: Int
  createdAt: Int
  id: Int
  isInitialized: Int
  isPrivate: Int
  name: Int
  ownerId: Int
  updatedAt: Int
}

input ProjectCreateInput {
  assets: AssetsOnProjectsCreateNestedManyWithoutProjectInput
  content: JSON!
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  members: UsersOnProjectsCreateNestedManyWithoutProjectInput
  mixdowns: MixdownCreateNestedManyWithoutProjectInput
  name: String
  owner: UserCreateNestedOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateNestedManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutOwnerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
}

input ProjectCreateNestedOneWithoutAssetsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutAssetsInput
  create: ProjectCreateWithoutAssetsInput
}

input ProjectCreateNestedOneWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembersInput
  create: ProjectCreateWithoutMembersInput
}

input ProjectCreateNestedOneWithoutMixdownsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMixdownsInput
  create: ProjectCreateWithoutMixdownsInput
}

input ProjectCreateOrConnectWithoutAssetsInput {
  create: ProjectCreateWithoutAssetsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutMixdownsInput {
  create: ProjectCreateWithoutMixdownsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutAssetsInput {
  content: JSON!
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  members: UsersOnProjectsCreateNestedManyWithoutProjectInput
  mixdowns: MixdownCreateNestedManyWithoutProjectInput
  name: String
  owner: UserCreateNestedOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutMembersInput {
  assets: AssetsOnProjectsCreateNestedManyWithoutProjectInput
  content: JSON!
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  mixdowns: MixdownCreateNestedManyWithoutProjectInput
  name: String
  owner: UserCreateNestedOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutMixdownsInput {
  assets: AssetsOnProjectsCreateNestedManyWithoutProjectInput
  content: JSON!
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  members: UsersOnProjectsCreateNestedManyWithoutProjectInput
  name: String
  owner: UserCreateNestedOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutOwnerInput {
  assets: AssetsOnProjectsCreateNestedManyWithoutProjectInput
  content: JSON!
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  members: UsersOnProjectsCreateNestedManyWithoutProjectInput
  mixdowns: MixdownCreateNestedManyWithoutProjectInput
  name: String
  updatedAt: Timestamp
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMaxAggregate {
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  name: String
  ownerId: String
  updatedAt: Timestamp
}

type ProjectMinAggregate {
  createdAt: Timestamp
  id: String
  isInitialized: Boolean
  isPrivate: Boolean
  name: String
  ownerId: String
  updatedAt: Timestamp
}

input ProjectOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isInitialized: SortOrder
  isPrivate: SortOrder
  name: SortOrder
  ownerId: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  content
  createdAt
  id
  isInitialized
  isPrivate
  name
  ownerId
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  content: JsonFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isInitialized: BoolFilter
  isPrivate: BoolFilter
  name: StringFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectUpdateInput {
  assets: AssetsOnProjectsUpdateManyWithoutProjectInput
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutOwnerInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutOwnerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateOneRequiredWithoutAssetsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutAssetsInput
  create: ProjectCreateWithoutAssetsInput
  update: ProjectUpdateWithoutAssetsInput
  upsert: ProjectUpsertWithoutAssetsInput
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembersInput
  create: ProjectCreateWithoutMembersInput
  update: ProjectUpdateWithoutMembersInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateOneRequiredWithoutMixdownsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMixdownsInput
  create: ProjectCreateWithoutMixdownsInput
  update: ProjectUpdateWithoutMixdownsInput
  upsert: ProjectUpsertWithoutMixdownsInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutAssetsInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutMembersInput {
  assets: AssetsOnProjectsUpdateManyWithoutProjectInput
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutMixdownsInput {
  assets: AssetsOnProjectsUpdateManyWithoutProjectInput
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutOwnerInput {
  assets: AssetsOnProjectsUpdateManyWithoutProjectInput
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isInitialized: BoolFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutAssetsInput {
  create: ProjectCreateWithoutAssetsInput!
  update: ProjectUpdateWithoutAssetsInput!
}

input ProjectUpsertWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  update: ProjectUpdateWithoutMembersInput!
}

input ProjectUpsertWithoutMixdownsInput {
  create: ProjectCreateWithoutMixdownsInput!
  update: ProjectUpdateWithoutMixdownsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  assets: AssetsOnProjectsListRelationFilter
  content: JsonFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isInitialized: BoolFilter
  isPrivate: BoolFilter
  members: UsersOnProjectsListRelationFilter
  mixdowns: MixdownListRelationFilter
  name: StringFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type PublishAssetArgs {
  id: String!
  jobId: String!
  mimeType: String!
  projectId: String!
}

type PublishProjectChangesArgs {
  authorId: String
  changes: JSONObject!
  date: Timestamp!
  id: String!
  projectId: String!
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAddress(cursor: AddressWhereUniqueInput, orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateBand(cursor: BandWhereUniqueInput, orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): AggregateBand!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateCommentLike(cursor: CommentLikeWhereUniqueInput, orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): AggregateCommentLike!
  aggregateFeedItem(cursor: FeedItemWhereUniqueInput, orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): AggregateFeedItem!
  aggregateFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): AggregateFeedItemLike!
  aggregateFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): AggregateFeedItemRevision!
  aggregateIssue(cursor: IssueWhereUniqueInput, orderBy: [IssueOrderByInput!], skip: Int, take: Int, where: IssueWhereInput): AggregateIssue!
  aggregateMixdown(cursor: MixdownWhereUniqueInput, orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): AggregateMixdown!
  aggregateProject(cursor: ProjectWhereUniqueInput, orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): AggregateUsersOnProjects!
  aggregateVersionInformation(cursor: VersionInformationWhereUniqueInput, orderBy: [VersionInformationOrderByInput!], skip: Int, take: Int, where: VersionInformationWhereInput): AggregateVersionInformation!
  band(where: BandWhereUniqueInput!): Band
  bands(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): [Band!]!
  comment(where: CommentWhereUniqueInput!): Comment
  commentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  commentLikes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  feedItem(where: FeedItemWhereUniqueInput!): FeedItem
  feedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  feedItemLikes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]!
  feedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  feedItemRevisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]!
  feedItems(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]!
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstBand(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): Band
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): CommentLike
  findFirstFeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): FeedItem
  findFirstFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): FeedItemLike
  findFirstFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): FeedItemRevision
  findFirstIssue(cursor: IssueWhereUniqueInput, distinct: [IssueScalarFieldEnum!], orderBy: [IssueOrderByInput!], skip: Int, take: Int, where: IssueWhereInput): Issue
  findFirstMixdown(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): Mixdown
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): Project
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): UsersOnProjects
  findFirstVersionInformation(cursor: VersionInformationWhereUniqueInput, distinct: [VersionInformationScalarFieldEnum!], orderBy: [VersionInformationOrderByInput!], skip: Int, take: Int, where: VersionInformationWhereInput): VersionInformation
  findManyUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]!
  findUniqueUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  followRecommendations: [User!]!
  issue(where: IssueWhereUniqueInput!): Issue
  issues(cursor: IssueWhereUniqueInput, distinct: [IssueScalarFieldEnum!], orderBy: [IssueOrderByInput!], skip: Int, take: Int, where: IssueWhereInput): [Issue!]!
  me: User!
  mixdown(where: MixdownWhereUniqueInput!): Mixdown
  mixdowns(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  versionInformation(where: VersionInformationWhereUniqueInput!): VersionInformation
  versionInformations(cursor: VersionInformationWhereUniqueInput, distinct: [VersionInformationScalarFieldEnum!], orderBy: [VersionInformationOrderByInput!], skip: Int, take: Int, where: VersionInformationWhereInput): [VersionInformation!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  assetAvailable(jobId: String!, projectId: String!): PublishAssetArgs!
  changes(projectId: String!): PublishProjectChangesArgs!
  newComment(feedItemId: String!): Comment!
  onlineStatus(userId: String!): Boolean!
}

type Tag {
  User: User
  userId: String
  value: String!
}

type TagCountAggregate {
  _all: Int!
  id: Int
  userId: Int
  value: Int
}

input TagCreateInput {
  User: UserCreateNestedOneWithoutInterestsInput
  id: String
  value: String!
}

input TagCreateNestedManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUserInput!]
  create: [TagCreateWithoutUserInput!]
}

input TagCreateOrConnectWithoutUserInput {
  create: TagCreateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutUserInput {
  id: String
  value: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

type TagMaxAggregate {
  id: String
  userId: String
  value: String
}

type TagMinAggregate {
  id: String
  userId: String
  value: String
}

input TagOrderByInput {
  id: SortOrder
  userId: SortOrder
  value: SortOrder
}

enum TagScalarFieldEnum {
  id
  userId
  value
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  id: StringFilter
  userId: StringNullableFilter
  value: StringFilter
}

input TagUpdateInput {
  User: UserUpdateOneWithoutInterestsInput
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutUserInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUserInput!]
  create: [TagCreateWithoutUserInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TagUpdateManyWithWhereWithoutUserInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutUserInput!]
}

input TagUpdateWithWhereUniqueWithoutUserInput {
  data: TagUpdateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutUserInput {
  create: TagCreateWithoutUserInput!
  update: TagUpdateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  User: UserRelationFilter
  id: StringFilter
  userId: StringNullableFilter
  value: StringFilter
}

input TagWhereUniqueInput {
  id: String
  value: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  Asset(cursor: AssetWhereUniqueInput, distinct: [AssetScalarFieldEnum!], orderBy: [AssetOrderByInput!], skip: Int, take: Int, where: AssetWhereInput): [Asset!]!
  Comment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  CommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]!
  EarlyAccessCode(cursor: EarlyAccessCodeWhereUniqueInput, distinct: [EarlyAccessCodeScalarFieldEnum!], orderBy: [EarlyAccessCodeOrderByInput!], skip: Int, take: Int, where: EarlyAccessCodeWhereInput): [EarlyAccessCode!]!
  FeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]!
  Issue(cursor: IssueWhereUniqueInput, distinct: [IssueScalarFieldEnum!], orderBy: [IssueOrderByInput!], skip: Int, take: Int, where: IssueWhereInput): [Issue!]!
  Mixdown(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]!
  address: Address
  addressId: String
  avatar: String
  bio: String
  createdAt: Timestamp!
  email: String!
  feed(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]!
  followedBy(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  followedByCount: Int
  following(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  followingCount: Int
  friends: [User!]
  handle: String!
  id: String!
  interests(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  isMeFollowing: Boolean
  isMyself: Boolean
  isOnline: Boolean!
  memberOfBands(cursor: UsersOnBandsWhereUniqueInput, distinct: [UsersOnBandsScalarFieldEnum!], orderBy: [UsersOnBandsOrderByInput!], skip: Int, take: Int, where: UsersOnBandsWhereInput): [UsersOnBands!]!
  memberOfProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]!
  name: String!
  ownsBands(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): [Band!]!
  ownsProjects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  role: Role!
  sessionCount: Int
  updatedAt: Timestamp!
  website: String
}

type UserCountAggregate {
  _all: Int!
  addressId: Int
  avatar: Int
  bio: Int
  createdAt: Int
  email: Int
  handle: Int
  id: Int
  isOnline: Int
  name: Int
  password: Int
  role: Int
  updatedAt: Int
  website: Int
}

input UserCreateInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateNestedManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAddressInput!]
  create: [UserCreateWithoutAddressInput!]
}

input UserCreateNestedManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowedByInput!]
  create: [UserCreateWithoutFollowedByInput!]
}

input UserCreateNestedManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateNestedOneWithoutAssetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssetInput
  create: UserCreateWithoutAssetInput
}

input UserCreateNestedOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
}

input UserCreateNestedOneWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentLikeInput
  create: UserCreateWithoutCommentLikeInput
}

input UserCreateNestedOneWithoutFeedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedInput
  create: UserCreateWithoutFeedInput
}

input UserCreateNestedOneWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedItemLikeInput
  create: UserCreateWithoutFeedItemLikeInput
}

input UserCreateNestedOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutInterestsInput
  create: UserCreateWithoutInterestsInput
}

input UserCreateNestedOneWithoutIssueInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutIssueInput
  create: UserCreateWithoutIssueInput
}

input UserCreateNestedOneWithoutMemberOfBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMemberOfBandsInput
  create: UserCreateWithoutMemberOfBandsInput
}

input UserCreateNestedOneWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMemberOfProjectsInput
  create: UserCreateWithoutMemberOfProjectsInput
}

input UserCreateNestedOneWithoutMixdownInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMixdownInput
  create: UserCreateWithoutMixdownInput
}

input UserCreateNestedOneWithoutOwnsBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOwnsBandsInput
  create: UserCreateWithoutOwnsBandsInput
}

input UserCreateNestedOneWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOwnsProjectsInput
  create: UserCreateWithoutOwnsProjectsInput
}

input UserCreateOrConnectWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAssetInput {
  create: UserCreateWithoutAssetInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentLikeInput {
  create: UserCreateWithoutCommentLikeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFeedInput {
  create: UserCreateWithoutFeedInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFeedItemLikeInput {
  create: UserCreateWithoutFeedItemLikeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutIssueInput {
  create: UserCreateWithoutIssueInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMemberOfBandsInput {
  create: UserCreateWithoutMemberOfBandsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMemberOfProjectsInput {
  create: UserCreateWithoutMemberOfProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMixdownInput {
  create: UserCreateWithoutMixdownInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOwnsBandsInput {
  create: UserCreateWithoutOwnsBandsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOwnsProjectsInput {
  create: UserCreateWithoutOwnsProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAddressInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutAssetInput {
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutCommentInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutCommentLikeInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFeedInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFeedItemLikeInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFollowedByInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFollowingInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutInterestsInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutIssueInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMemberOfBandsInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMemberOfProjectsInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMixdownInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutOwnsBandsInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsProjects: ProjectCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutOwnsProjectsInput {
  Asset: AssetCreateNestedManyWithoutOwnerInput
  Comment: CommentCreateNestedManyWithoutAuthorInput
  CommentLike: CommentLikeCreateNestedManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeCreateNestedManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeCreateNestedManyWithoutUserInput
  Issue: IssueCreateNestedManyWithoutCreatedByInput
  Mixdown: MixdownCreateNestedManyWithoutTriggerdByInput
  address: AddressCreateNestedOneWithoutUserInput
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String!
  feed: FeedItemCreateNestedManyWithoutAuthorInput
  followedBy: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateNestedManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateNestedManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateNestedManyWithoutUserInput
  name: String!
  ownsBands: BandCreateNestedManyWithoutCreatedByInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  addressId: String
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String
  handle: String
  id: String
  isOnline: Boolean
  name: String
  password: String
  role: Role
  updatedAt: Timestamp
  website: String
}

type UserMinAggregate {
  addressId: String
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String
  handle: String
  id: String
  isOnline: Boolean
  name: String
  password: String
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserOrderByInput {
  addressId: SortOrder
  avatar: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  email: SortOrder
  handle: SortOrder
  id: SortOrder
  isOnline: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  addressId
  avatar
  bio
  createdAt
  email
  handle
  id
  isOnline
  name
  password
  role
  updatedAt
  website
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  addressId: StringNullableFilter
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  handle: StringFilter
  id: StringFilter
  isOnline: BoolFilter
  name: StringFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserSignUpInput {
  accessCode: String!
  email: String!
  handle: String!
  name: String!
  password: String!
}

input UserUpdateInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isOnline: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutAddressInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowedByInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowingInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAddressInput!]
  create: [UserCreateWithoutAddressInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [UserUpdateManyWithWhereWithoutAddressInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAddressInput!]
}

input UserUpdateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowedByInput!]
  create: [UserCreateWithoutFollowedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedByInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowedByInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedByInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateOneRequiredWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
  update: UserUpdateWithoutCommentInput
  upsert: UserUpsertWithoutCommentInput
}

input UserUpdateOneRequiredWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentLikeInput
  create: UserCreateWithoutCommentLikeInput
  update: UserUpdateWithoutCommentLikeInput
  upsert: UserUpsertWithoutCommentLikeInput
}

input UserUpdateOneRequiredWithoutFeedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedInput
  create: UserCreateWithoutFeedInput
  update: UserUpdateWithoutFeedInput
  upsert: UserUpsertWithoutFeedInput
}

input UserUpdateOneRequiredWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedItemLikeInput
  create: UserCreateWithoutFeedItemLikeInput
  update: UserUpdateWithoutFeedItemLikeInput
  upsert: UserUpsertWithoutFeedItemLikeInput
}

input UserUpdateOneRequiredWithoutMemberOfBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMemberOfBandsInput
  create: UserCreateWithoutMemberOfBandsInput
  update: UserUpdateWithoutMemberOfBandsInput
  upsert: UserUpsertWithoutMemberOfBandsInput
}

input UserUpdateOneRequiredWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMemberOfProjectsInput
  create: UserCreateWithoutMemberOfProjectsInput
  update: UserUpdateWithoutMemberOfProjectsInput
  upsert: UserUpsertWithoutMemberOfProjectsInput
}

input UserUpdateOneRequiredWithoutMixdownInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMixdownInput
  create: UserCreateWithoutMixdownInput
  update: UserUpdateWithoutMixdownInput
  upsert: UserUpsertWithoutMixdownInput
}

input UserUpdateOneRequiredWithoutOwnsBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOwnsBandsInput
  create: UserCreateWithoutOwnsBandsInput
  update: UserUpdateWithoutOwnsBandsInput
  upsert: UserUpsertWithoutOwnsBandsInput
}

input UserUpdateOneRequiredWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOwnsProjectsInput
  create: UserCreateWithoutOwnsProjectsInput
  update: UserUpdateWithoutOwnsProjectsInput
  upsert: UserUpsertWithoutOwnsProjectsInput
}

input UserUpdateOneWithoutAssetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssetInput
  create: UserCreateWithoutAssetInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAssetInput
  upsert: UserUpsertWithoutAssetInput
}

input UserUpdateOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutInterestsInput
  create: UserCreateWithoutInterestsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInterestsInput
  upsert: UserUpsertWithoutInterestsInput
}

input UserUpdateOneWithoutIssueInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutIssueInput
  create: UserCreateWithoutIssueInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutIssueInput
  upsert: UserUpsertWithoutIssueInput
}

input UserUpdateWithWhereUniqueWithoutAddressInput {
  data: UserUpdateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowedByInput {
  data: UserUpdateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutAddressInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutAssetInput {
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentLikeInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedItemLikeInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowedByInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowingInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutInterestsInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutIssueInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMemberOfBandsInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMemberOfProjectsInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMixdownInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOwnsBandsInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOwnsProjectsInput {
  Asset: AssetUpdateManyWithoutOwnerInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  Issue: IssueUpdateManyWithoutCreatedByInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  update: UserUpdateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  update: UserUpdateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAssetInput {
  create: UserCreateWithoutAssetInput!
  update: UserUpdateWithoutAssetInput!
}

input UserUpsertWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  update: UserUpdateWithoutCommentInput!
}

input UserUpsertWithoutCommentLikeInput {
  create: UserCreateWithoutCommentLikeInput!
  update: UserUpdateWithoutCommentLikeInput!
}

input UserUpsertWithoutFeedInput {
  create: UserCreateWithoutFeedInput!
  update: UserUpdateWithoutFeedInput!
}

input UserUpsertWithoutFeedItemLikeInput {
  create: UserCreateWithoutFeedItemLikeInput!
  update: UserUpdateWithoutFeedItemLikeInput!
}

input UserUpsertWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput!
  update: UserUpdateWithoutInterestsInput!
}

input UserUpsertWithoutIssueInput {
  create: UserCreateWithoutIssueInput!
  update: UserUpdateWithoutIssueInput!
}

input UserUpsertWithoutMemberOfBandsInput {
  create: UserCreateWithoutMemberOfBandsInput!
  update: UserUpdateWithoutMemberOfBandsInput!
}

input UserUpsertWithoutMemberOfProjectsInput {
  create: UserCreateWithoutMemberOfProjectsInput!
  update: UserUpdateWithoutMemberOfProjectsInput!
}

input UserUpsertWithoutMixdownInput {
  create: UserCreateWithoutMixdownInput!
  update: UserUpdateWithoutMixdownInput!
}

input UserUpsertWithoutOwnsBandsInput {
  create: UserCreateWithoutOwnsBandsInput!
  update: UserUpdateWithoutOwnsBandsInput!
}

input UserUpsertWithoutOwnsProjectsInput {
  create: UserCreateWithoutOwnsProjectsInput!
  update: UserUpdateWithoutOwnsProjectsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Asset: AssetListRelationFilter
  Comment: CommentListRelationFilter
  CommentLike: CommentLikeListRelationFilter
  EarlyAccessCode: EarlyAccessCodeListRelationFilter
  FeedItemLike: FeedItemLikeListRelationFilter
  Issue: IssueListRelationFilter
  Mixdown: MixdownListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: AddressRelationFilter
  addressId: StringNullableFilter
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  feed: FeedItemListRelationFilter
  followedBy: UserListRelationFilter
  following: UserListRelationFilter
  handle: StringFilter
  id: StringFilter
  interests: TagListRelationFilter
  isOnline: BoolFilter
  memberOfBands: UsersOnBandsListRelationFilter
  memberOfProjects: UsersOnProjectsListRelationFilter
  name: StringFilter
  ownsBands: BandListRelationFilter
  ownsProjects: ProjectListRelationFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  handle: String
  id: String
}

type UsersOnBands {
  bandId: String!
  createdAt: Timestamp!
  userId: String!
}

input UsersOnBandsCreateNestedManyWithoutBandInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutBandInput!]
  create: [UsersOnBandsCreateWithoutBandInput!]
}

input UsersOnBandsCreateNestedManyWithoutUserInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutUserInput!]
  create: [UsersOnBandsCreateWithoutUserInput!]
}

input UsersOnBandsCreateOrConnectWithoutBandInput {
  create: UsersOnBandsCreateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsCreateOrConnectWithoutUserInput {
  create: UsersOnBandsCreateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsCreateWithoutBandInput {
  createdAt: Timestamp
  user: UserCreateNestedOneWithoutMemberOfBandsInput!
}

input UsersOnBandsCreateWithoutUserInput {
  band: BandCreateNestedOneWithoutMembersInput!
  createdAt: Timestamp
}

input UsersOnBandsListRelationFilter {
  every: UsersOnBandsWhereInput
  none: UsersOnBandsWhereInput
  some: UsersOnBandsWhereInput
}

input UsersOnBandsOrderByInput {
  bandId: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

enum UsersOnBandsScalarFieldEnum {
  bandId
  createdAt
  userId
}

input UsersOnBandsScalarWhereInput {
  AND: [UsersOnBandsScalarWhereInput!]
  NOT: [UsersOnBandsScalarWhereInput!]
  OR: [UsersOnBandsScalarWhereInput!]
  bandId: StringFilter
  createdAt: DateTimeFilter
  userId: StringFilter
}

input UsersOnBandsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnBandsUpdateManyWithWhereWithoutBandInput {
  data: UsersOnBandsUpdateManyMutationInput!
  where: UsersOnBandsScalarWhereInput!
}

input UsersOnBandsUpdateManyWithWhereWithoutUserInput {
  data: UsersOnBandsUpdateManyMutationInput!
  where: UsersOnBandsScalarWhereInput!
}

input UsersOnBandsUpdateManyWithoutBandInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutBandInput!]
  create: [UsersOnBandsCreateWithoutBandInput!]
  delete: [UsersOnBandsWhereUniqueInput!]
  deleteMany: [UsersOnBandsScalarWhereInput!]
  disconnect: [UsersOnBandsWhereUniqueInput!]
  set: [UsersOnBandsWhereUniqueInput!]
  update: [UsersOnBandsUpdateWithWhereUniqueWithoutBandInput!]
  updateMany: [UsersOnBandsUpdateManyWithWhereWithoutBandInput!]
  upsert: [UsersOnBandsUpsertWithWhereUniqueWithoutBandInput!]
}

input UsersOnBandsUpdateManyWithoutUserInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutUserInput!]
  create: [UsersOnBandsCreateWithoutUserInput!]
  delete: [UsersOnBandsWhereUniqueInput!]
  deleteMany: [UsersOnBandsScalarWhereInput!]
  disconnect: [UsersOnBandsWhereUniqueInput!]
  set: [UsersOnBandsWhereUniqueInput!]
  update: [UsersOnBandsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnBandsUpdateManyWithWhereWithoutUserInput!]
  upsert: [UsersOnBandsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnBandsUpdateWithWhereUniqueWithoutBandInput {
  data: UsersOnBandsUpdateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnBandsUpdateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpdateWithoutBandInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMemberOfBandsInput
}

input UsersOnBandsUpdateWithoutUserInput {
  band: BandUpdateOneRequiredWithoutMembersInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnBandsUpsertWithWhereUniqueWithoutBandInput {
  create: UsersOnBandsCreateWithoutBandInput!
  update: UsersOnBandsUpdateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnBandsCreateWithoutUserInput!
  update: UsersOnBandsUpdateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUserIdBandIdCompoundUniqueInput {
  bandId: String!
  userId: String!
}

input UsersOnBandsWhereInput {
  AND: [UsersOnBandsWhereInput!]
  NOT: [UsersOnBandsWhereInput!]
  OR: [UsersOnBandsWhereInput!]
  band: BandRelationFilter
  bandId: StringFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UsersOnBandsWhereUniqueInput {
  userId_bandId: UsersOnBandsUserIdBandIdCompoundUniqueInput
}

type UsersOnProjects {
  createdAt: Timestamp!
  project: Project!
  projectId: String!
  user: User!
  userId: String!
}

type UsersOnProjectsCountAggregate {
  _all: Int!
  createdAt: Int
  projectId: Int
  userId: Int
}

input UsersOnProjectsCreateInput {
  createdAt: Timestamp
  project: ProjectCreateNestedOneWithoutMembersInput!
  user: UserCreateNestedOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateNestedManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutProjectInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
}

input UsersOnProjectsCreateNestedManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutUserInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
}

input UsersOnProjectsCreateOrConnectWithoutProjectInput {
  create: UsersOnProjectsCreateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsCreateOrConnectWithoutUserInput {
  create: UsersOnProjectsCreateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsCreateWithoutProjectInput {
  createdAt: Timestamp
  user: UserCreateNestedOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateWithoutUserInput {
  createdAt: Timestamp
  project: ProjectCreateNestedOneWithoutMembersInput!
}

input UsersOnProjectsListRelationFilter {
  every: UsersOnProjectsWhereInput
  none: UsersOnProjectsWhereInput
  some: UsersOnProjectsWhereInput
}

type UsersOnProjectsMaxAggregate {
  createdAt: Timestamp
  projectId: String
  userId: String
}

type UsersOnProjectsMinAggregate {
  createdAt: Timestamp
  projectId: String
  userId: String
}

input UsersOnProjectsOrderByInput {
  createdAt: SortOrder
  projectId: SortOrder
  userId: SortOrder
}

enum UsersOnProjectsScalarFieldEnum {
  createdAt
  projectId
  userId
}

input UsersOnProjectsScalarWhereInput {
  AND: [UsersOnProjectsScalarWhereInput!]
  NOT: [UsersOnProjectsScalarWhereInput!]
  OR: [UsersOnProjectsScalarWhereInput!]
  createdAt: DateTimeFilter
  projectId: StringFilter
  userId: StringFilter
}

input UsersOnProjectsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnProjectsUpdateManyWithWhereWithoutProjectInput {
  data: UsersOnProjectsUpdateManyMutationInput!
  where: UsersOnProjectsScalarWhereInput!
}

input UsersOnProjectsUpdateManyWithWhereWithoutUserInput {
  data: UsersOnProjectsUpdateManyMutationInput!
  where: UsersOnProjectsScalarWhereInput!
}

input UsersOnProjectsUpdateManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutProjectInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereWithoutProjectInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput!]
}

input UsersOnProjectsUpdateManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutUserInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereWithoutUserInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput {
  data: UsersOnProjectsUpdateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnProjectsUpdateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput {
  create: UsersOnProjectsCreateWithoutProjectInput!
  update: UsersOnProjectsUpdateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnProjectsCreateWithoutUserInput!
  update: UsersOnProjectsUpdateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUserIdProjectIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UsersOnProjectsWhereInput {
  AND: [UsersOnProjectsWhereInput!]
  NOT: [UsersOnProjectsWhereInput!]
  OR: [UsersOnProjectsWhereInput!]
  createdAt: DateTimeFilter
  project: ProjectRelationFilter
  projectId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UsersOnProjectsWhereUniqueInput {
  userId_projectId: UsersOnProjectsUserIdProjectIdCompoundUniqueInput
}

type VersionInformation {
  createdAt: Timestamp!
  description: String!
  id: String!
}

type VersionInformationCountAggregate {
  _all: Int!
  createdAt: Int
  description: Int
  id: Int
}

input VersionInformationCreateInput {
  createdAt: Timestamp
  description: String!
  id: String
}

type VersionInformationMaxAggregate {
  createdAt: Timestamp
  description: String
  id: String
}

type VersionInformationMinAggregate {
  createdAt: Timestamp
  description: String
  id: String
}

input VersionInformationOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
}

enum VersionInformationScalarFieldEnum {
  createdAt
  description
  id
}

input VersionInformationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input VersionInformationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input VersionInformationWhereInput {
  AND: [VersionInformationWhereInput!]
  NOT: [VersionInformationWhereInput!]
  OR: [VersionInformationWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
}

input VersionInformationWhereUniqueInput {
  id: String
}
