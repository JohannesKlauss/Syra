# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp!
  state: String!
  updatedAt: Timestamp!
  User(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  zip: Int!
}

type AddressAvgAggregate {
  zip: Float!
}

type AddressCountAggregate {
  _all: Int!
  addressLine1: Int
  addressLine2: Int
  city: Int
  country: Int
  createdAt: Int
  id: Int
  state: Int
  updatedAt: Int
  zip: Int!
}

input AddressCreateInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  User: UserCreateManyWithoutAddressInput
  zip: Int!
}

input AddressCreateOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressCreateWithoutUserInput
}

input AddressCreateOrConnectWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutUserInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  createdAt: Timestamp
  id: String
  state: String!
  updatedAt: Timestamp
  zip: Int!
}

type AddressMaxAggregate {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  createdAt: Timestamp
  id: String
  state: String
  updatedAt: Timestamp
  zip: Int!
}

type AddressMinAggregate {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  createdAt: Timestamp
  id: String
  state: String
  updatedAt: Timestamp
  zip: Int!
}

input AddressOrderByInput {
  addressLine1: SortOrder
  addressLine2: SortOrder
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  state: SortOrder
  updatedAt: SortOrder
  zip: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  addressLine1
  addressLine2
  city
  country
  createdAt
  id
  state
  updatedAt
  zip
}

type AddressSumAggregate {
  zip: Int!
}

input AddressUpdateInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateManyWithoutAddressInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUpdateWithoutUserInput {
  addressLine1: StringFieldUpdateOperationsInput
  addressLine2: NullableStringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  zip: IntFieldUpdateOperationsInput
}

input AddressUpsertWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserInput!
}

input AddressWhereInput {
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  AND: [AddressWhereInput!]
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  state: StringFilter
  updatedAt: DateTimeFilter
  User: UserListRelationFilter
  zip: IntFilter
}

input AddressWhereUniqueInput {
  id: String
}

type AggregateAddress {
  avg: AddressAvgAggregate
  count: AddressCountAggregate
  max: AddressMaxAggregate
  min: AddressMinAggregate
  sum: AddressSumAggregate
}

type AggregateBand {
  count: BandCountAggregate
  max: BandMaxAggregate
  min: BandMinAggregate
}

type AggregateComment {
  count: CommentCountAggregate
  max: CommentMaxAggregate
  min: CommentMinAggregate
}

type AggregateCommentLike {
  count: CommentLikeCountAggregate
  max: CommentLikeMaxAggregate
  min: CommentLikeMinAggregate
}

type AggregateFeedItem {
  count: FeedItemCountAggregate
  max: FeedItemMaxAggregate
  min: FeedItemMinAggregate
}

type AggregateFeedItemLike {
  count: FeedItemLikeCountAggregate
  max: FeedItemLikeMaxAggregate
  min: FeedItemLikeMinAggregate
}

type AggregateFeedItemRevision {
  count: FeedItemRevisionCountAggregate
  max: FeedItemRevisionMaxAggregate
  min: FeedItemRevisionMinAggregate
}

type AggregateMixdown {
  avg: MixdownAvgAggregate
  count: MixdownCountAggregate
  max: MixdownMaxAggregate
  min: MixdownMinAggregate
  sum: MixdownSumAggregate
}

type AggregateProject {
  count: ProjectCountAggregate
  max: ProjectMaxAggregate
  min: ProjectMinAggregate
}

type AggregateTag {
  count: TagCountAggregate
  max: TagMaxAggregate
  min: TagMinAggregate
}

type AggregateUser {
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
}

type AggregateUsersOnProjects {
  count: UsersOnProjectsCountAggregate
  max: UsersOnProjectsMaxAggregate
  min: UsersOnProjectsMinAggregate
}

type AudioAsset {
  id: String!
  isPublic: Boolean
  location: String!
  name: String!
  userId: String
}

input AudioAssetCreateManyWithoutOwnerInput {
  connect: [AudioAssetWhereUniqueInput!]
  connectOrCreate: [AudioAssetCreateOrConnectWithoutownerInput!]
  create: [AudioAssetCreateWithoutOwnerInput!]
}

input AudioAssetCreateOneWithoutMixdownInput {
  connect: AudioAssetWhereUniqueInput
  connectOrCreate: AudioAssetCreateOrConnectWithoutMixdownInput
  create: AudioAssetCreateWithoutMixdownInput
}

input AudioAssetCreateOrConnectWithoutMixdownInput {
  create: AudioAssetCreateWithoutMixdownInput!
  where: AudioAssetWhereUniqueInput!
}

input AudioAssetCreateOrConnectWithoutownerInput {
  create: AudioAssetCreateWithoutOwnerInput!
  where: AudioAssetWhereUniqueInput!
}

input AudioAssetCreateWithoutMixdownInput {
  id: String
  isPublic: Boolean
  location: String!
  name: String!
  owner: UserCreateOneWithoutAudioAssetInput
}

input AudioAssetCreateWithoutOwnerInput {
  id: String
  isPublic: Boolean
  location: String!
  Mixdown: MixdownCreateManyWithoutAudioInput
  name: String!
}

input AudioAssetListRelationFilter {
  every: AudioAssetWhereInput
  none: AudioAssetWhereInput
  some: AudioAssetWhereInput
}

input AudioAssetOrderByInput {
  id: SortOrder
  isPublic: SortOrder
  location: SortOrder
  name: SortOrder
  userId: SortOrder
}

input AudioAssetRelationFilter {
  is: AudioAssetWhereInput
  isNot: AudioAssetWhereInput
}

enum AudioAssetScalarFieldEnum {
  id
  isPublic
  location
  name
  userId
}

input AudioAssetScalarWhereInput {
  AND: [AudioAssetScalarWhereInput!]
  id: StringFilter
  isPublic: BoolNullableFilter
  location: StringFilter
  name: StringFilter
  NOT: [AudioAssetScalarWhereInput!]
  OR: [AudioAssetScalarWhereInput!]
  userId: StringNullableFilter
}

input AudioAssetUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input AudioAssetUpdateManyWithoutOwnerInput {
  connect: [AudioAssetWhereUniqueInput!]
  connectOrCreate: [AudioAssetCreateOrConnectWithoutownerInput!]
  create: [AudioAssetCreateWithoutOwnerInput!]
  delete: [AudioAssetWhereUniqueInput!]
  deleteMany: [AudioAssetScalarWhereInput!]
  disconnect: [AudioAssetWhereUniqueInput!]
  set: [AudioAssetWhereUniqueInput!]
  update: [AudioAssetUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [AudioAssetUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [AudioAssetUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AudioAssetUpdateManyWithWhereWithoutOwnerInput {
  data: AudioAssetUpdateManyMutationInput!
  where: AudioAssetScalarWhereInput!
}

input AudioAssetUpdateOneRequiredWithoutMixdownInput {
  connect: AudioAssetWhereUniqueInput
  connectOrCreate: AudioAssetCreateOrConnectWithoutMixdownInput
  create: AudioAssetCreateWithoutMixdownInput
  update: AudioAssetUpdateWithoutMixdownInput
  upsert: AudioAssetUpsertWithoutMixdownInput
}

input AudioAssetUpdateWithoutMixdownInput {
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutAudioAssetInput
}

input AudioAssetUpdateWithoutOwnerInput {
  id: StringFieldUpdateOperationsInput
  isPublic: NullableBoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  Mixdown: MixdownUpdateManyWithoutAudioInput
  name: StringFieldUpdateOperationsInput
}

input AudioAssetUpdateWithWhereUniqueWithoutOwnerInput {
  data: AudioAssetUpdateWithoutOwnerInput!
  where: AudioAssetWhereUniqueInput!
}

input AudioAssetUpsertWithoutMixdownInput {
  create: AudioAssetCreateWithoutMixdownInput!
  update: AudioAssetUpdateWithoutMixdownInput!
}

input AudioAssetUpsertWithWhereUniqueWithoutOwnerInput {
  create: AudioAssetCreateWithoutOwnerInput!
  update: AudioAssetUpdateWithoutOwnerInput!
  where: AudioAssetWhereUniqueInput!
}

input AudioAssetWhereInput {
  AND: [AudioAssetWhereInput!]
  id: StringFilter
  isPublic: BoolNullableFilter
  location: StringFilter
  Mixdown: MixdownListRelationFilter
  name: StringFilter
  NOT: [AudioAssetWhereInput!]
  OR: [AudioAssetWhereInput!]
  owner: UserRelationFilter
  userId: StringNullableFilter
}

input AudioAssetWhereUniqueInput {
  id: String
}

type Band {
  createdAt: Timestamp!
  createdBy: User!
  id: String!
  isPublic: Boolean!
  members(cursor: UsersOnBandsWhereUniqueInput, distinct: [UsersOnBandsScalarFieldEnum!], orderBy: [UsersOnBandsOrderByInput!], skip: Int, take: Int, where: UsersOnBandsWhereInput): [UsersOnBands!]
  name: String!
  updatedAt: Timestamp!
  userId: String!
}

type BandCountAggregate {
  _all: Int!
  createdAt: Int
  id: Int
  isPublic: Int
  name: Int
  updatedAt: Int
  userId: Int
}

input BandCreateInput {
  createdAt: Timestamp
  createdBy: UserCreateOneWithoutOwnsBandsInput!
  id: String
  isPublic: Boolean
  members: UsersOnBandsCreateManyWithoutBandInput
  name: String!
  updatedAt: Timestamp
}

input BandCreateManyWithoutCreatedByInput {
  connect: [BandWhereUniqueInput!]
  connectOrCreate: [BandCreateOrConnectWithoutcreatedByInput!]
  create: [BandCreateWithoutCreatedByInput!]
}

input BandCreateOneWithoutMembersInput {
  connect: BandWhereUniqueInput
  connectOrCreate: BandCreateOrConnectWithoutmembersInput
  create: BandCreateWithoutMembersInput
}

input BandCreateOrConnectWithoutcreatedByInput {
  create: BandCreateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandCreateOrConnectWithoutmembersInput {
  create: BandCreateWithoutMembersInput!
  where: BandWhereUniqueInput!
}

input BandCreateWithoutCreatedByInput {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  members: UsersOnBandsCreateManyWithoutBandInput
  name: String!
  updatedAt: Timestamp
}

input BandCreateWithoutMembersInput {
  createdAt: Timestamp
  createdBy: UserCreateOneWithoutOwnsBandsInput!
  id: String
  isPublic: Boolean
  name: String!
  updatedAt: Timestamp
}

input BandListRelationFilter {
  every: BandWhereInput
  none: BandWhereInput
  some: BandWhereInput
}

type BandMaxAggregate {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  name: String
  updatedAt: Timestamp
  userId: String
}

type BandMinAggregate {
  createdAt: Timestamp
  id: String
  isPublic: Boolean
  name: String
  updatedAt: Timestamp
  userId: String
}

input BandOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isPublic: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BandRelationFilter {
  is: BandWhereInput
  isNot: BandWhereInput
}

enum BandScalarFieldEnum {
  createdAt
  id
  isPublic
  name
  updatedAt
  userId
}

input BandScalarWhereInput {
  AND: [BandScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  isPublic: BoolFilter
  name: StringFilter
  NOT: [BandScalarWhereInput!]
  OR: [BandScalarWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BandUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutOwnsBandsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  members: UsersOnBandsUpdateManyWithoutBandInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateManyWithoutCreatedByInput {
  connect: [BandWhereUniqueInput!]
  connectOrCreate: [BandCreateOrConnectWithoutcreatedByInput!]
  create: [BandCreateWithoutCreatedByInput!]
  delete: [BandWhereUniqueInput!]
  deleteMany: [BandScalarWhereInput!]
  disconnect: [BandWhereUniqueInput!]
  set: [BandWhereUniqueInput!]
  update: [BandUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BandUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [BandUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BandUpdateManyWithWhereWithoutCreatedByInput {
  data: BandUpdateManyMutationInput!
  where: BandScalarWhereInput!
}

input BandUpdateOneRequiredWithoutMembersInput {
  connect: BandWhereUniqueInput
  connectOrCreate: BandCreateOrConnectWithoutmembersInput
  create: BandCreateWithoutMembersInput
  update: BandUpdateWithoutMembersInput
  upsert: BandUpsertWithoutMembersInput
}

input BandUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  members: UsersOnBandsUpdateManyWithoutBandInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateWithoutMembersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutOwnsBandsInput
  id: StringFieldUpdateOperationsInput
  isPublic: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BandUpdateWithWhereUniqueWithoutCreatedByInput {
  data: BandUpdateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandUpsertWithoutMembersInput {
  create: BandCreateWithoutMembersInput!
  update: BandUpdateWithoutMembersInput!
}

input BandUpsertWithWhereUniqueWithoutCreatedByInput {
  create: BandCreateWithoutCreatedByInput!
  update: BandUpdateWithoutCreatedByInput!
  where: BandWhereUniqueInput!
}

input BandWhereInput {
  AND: [BandWhereInput!]
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  id: StringFilter
  isPublic: BoolFilter
  members: UsersOnBandsListRelationFilter
  name: StringFilter
  NOT: [BandWhereInput!]
  OR: [BandWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BandWhereUniqueInput {
  id: String
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Comment {
  author: User!
  authorId: String!
  commentCount: Int
  createdAt: Timestamp!
  feedItem: FeedItem
  feedItemId: String
  id: String!
  isMeLiking: Boolean
  likeCount: Int
  likes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]
  parentComment: Comment
  parentCommentId: String
  subComments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  text: String!
  updatedAt: Timestamp!
}

type CommentCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  feedItemId: Int
  id: Int
  parentCommentId: Int
  text: Int
  updatedAt: Int
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  parentComment: CommentCreateOneWithoutSubCommentsInput
  subComments: CommentCreateManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutauthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutfeedItemInput!]
  create: [CommentCreateWithoutFeedItemInput!]
}

input CommentCreateManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutparentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
}

input CommentCreateOneWithoutLikesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutlikesInput
  create: CommentCreateWithoutLikesInput
}

input CommentCreateOneWithoutSubCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutsubCommentsInput
  create: CommentCreateWithoutSubCommentsInput
}

input CommentCreateOrConnectWithoutauthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutfeedItemInput {
  create: CommentCreateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutlikesInput {
  create: CommentCreateWithoutLikesInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutparentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutsubCommentsInput {
  create: CommentCreateWithoutSubCommentsInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  parentComment: CommentCreateOneWithoutSubCommentsInput
  subComments: CommentCreateManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutFeedItemInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: Timestamp
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  parentComment: CommentCreateOneWithoutSubCommentsInput
  subComments: CommentCreateManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutLikesInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput
  id: String
  parentComment: CommentCreateOneWithoutSubCommentsInput
  subComments: CommentCreateManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutParentCommentInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  subComments: CommentCreateManyWithoutParentCommentInput
  text: String!
  updatedAt: Timestamp
}

input CommentCreateWithoutSubCommentsInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutCommentsInput
  id: String
  likes: CommentLikeCreateManyWithoutCommentInput
  parentComment: CommentCreateOneWithoutSubCommentsInput
  text: String!
  updatedAt: Timestamp
}

type CommentLike {
  comment: Comment!
  commentId: String!
  createdAt: Timestamp!
  user: User!
  userId: String!
}

type CommentLikeCountAggregate {
  _all: Int!
  commentId: Int
  createdAt: Int
  userId: Int
}

input CommentLikeCreateInput {
  comment: CommentCreateOneWithoutLikesInput!
  createdAt: Timestamp
  user: UserCreateOneWithoutCommentLikeInput!
}

input CommentLikeCreateManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutcommentInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
}

input CommentLikeCreateManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutuserInput!]
  create: [CommentLikeCreateWithoutUserInput!]
}

input CommentLikeCreateOrConnectWithoutcommentInput {
  create: CommentLikeCreateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeCreateOrConnectWithoutuserInput {
  create: CommentLikeCreateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeCreateWithoutCommentInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutCommentLikeInput!
}

input CommentLikeCreateWithoutUserInput {
  comment: CommentCreateOneWithoutLikesInput!
  createdAt: Timestamp
}

input CommentLikeListRelationFilter {
  every: CommentLikeWhereInput
  none: CommentLikeWhereInput
  some: CommentLikeWhereInput
}

type CommentLikeMaxAggregate {
  commentId: String
  createdAt: Timestamp
  userId: String
}

type CommentLikeMinAggregate {
  commentId: String
  createdAt: Timestamp
  userId: String
}

input CommentLikeOrderByInput {
  commentId: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

enum CommentLikeScalarFieldEnum {
  commentId
  createdAt
  userId
}

input CommentLikeScalarWhereInput {
  AND: [CommentLikeScalarWhereInput!]
  commentId: StringFilter
  createdAt: DateTimeFilter
  NOT: [CommentLikeScalarWhereInput!]
  OR: [CommentLikeScalarWhereInput!]
  userId: StringFilter
}

input CommentLikeUpdateInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateManyWithoutCommentInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutcommentInput!]
  create: [CommentLikeCreateWithoutCommentInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentLikeUpdateManyWithWhereWithoutCommentInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentLikeUpdateManyWithoutUserInput {
  connect: [CommentLikeWhereUniqueInput!]
  connectOrCreate: [CommentLikeCreateOrConnectWithoutuserInput!]
  create: [CommentLikeCreateWithoutUserInput!]
  delete: [CommentLikeWhereUniqueInput!]
  deleteMany: [CommentLikeScalarWhereInput!]
  disconnect: [CommentLikeWhereUniqueInput!]
  set: [CommentLikeWhereUniqueInput!]
  update: [CommentLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentLikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [CommentLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentLikeUpdateManyWithWhereWithoutCommentInput {
  data: CommentLikeUpdateManyMutationInput!
  where: CommentLikeScalarWhereInput!
}

input CommentLikeUpdateManyWithWhereWithoutUserInput {
  data: CommentLikeUpdateManyMutationInput!
  where: CommentLikeScalarWhereInput!
}

input CommentLikeUpdateWithoutCommentInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentLikeInput
}

input CommentLikeUpdateWithoutUserInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  data: CommentLikeUpdateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpdateWithWhereUniqueWithoutUserInput {
  data: CommentLikeUpdateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  create: CommentLikeCreateWithoutCommentInput!
  update: CommentLikeUpdateWithoutCommentInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUpsertWithWhereUniqueWithoutUserInput {
  create: CommentLikeCreateWithoutUserInput!
  update: CommentLikeUpdateWithoutUserInput!
  where: CommentLikeWhereUniqueInput!
}

input CommentLikeUserIdCommentIdCompoundUniqueInput {
  commentId: String!
  userId: String!
}

input CommentLikeWhereInput {
  AND: [CommentLikeWhereInput!]
  comment: CommentRelationFilter
  commentId: StringFilter
  createdAt: DateTimeFilter
  NOT: [CommentLikeWhereInput!]
  OR: [CommentLikeWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
}

input CommentLikeWhereUniqueInput {
  userId_commentId: CommentLikeUserIdCommentIdCompoundUniqueInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  authorId: String
  createdAt: Timestamp
  feedItemId: String
  id: String
  parentCommentId: String
  text: String
  updatedAt: Timestamp
}

type CommentMinAggregate {
  authorId: String
  createdAt: Timestamp
  feedItemId: String
  id: String
  parentCommentId: String
  text: String
  updatedAt: Timestamp
}

input CommentOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  parentCommentId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

enum CommentScalarFieldEnum {
  authorId
  createdAt
  feedItemId
  id
  parentCommentId
  text
  updatedAt
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  feedItemId: StringNullableFilter
  id: StringFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  parentCommentId: StringNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutauthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutFeedItemInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutfeedItemInput!]
  create: [CommentCreateWithoutFeedItemInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutFeedItemInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input CommentUpdateManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutparentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentCommentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentCommentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentCommentInput!]
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutFeedItemInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentCommentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneRequiredWithoutLikesInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutlikesInput
  create: CommentCreateWithoutLikesInput
  update: CommentUpdateWithoutLikesInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateOneWithoutSubCommentsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutsubCommentsInput
  create: CommentCreateWithoutSubCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutSubCommentsInput
  upsert: CommentUpsertWithoutSubCommentsInput
}

input CommentUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutFeedItemInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutLikesInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutParentCommentInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  subComments: CommentUpdateManyWithoutParentCommentInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutSubCommentsInput {
  author: UserUpdateOneRequiredWithoutCommentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  likes: CommentLikeUpdateManyWithoutCommentInput
  parentComment: CommentUpdateOneWithoutSubCommentsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutFeedItemInput {
  data: CommentUpdateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  data: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutLikesInput {
  create: CommentCreateWithoutLikesInput!
  update: CommentUpdateWithoutLikesInput!
}

input CommentUpsertWithoutSubCommentsInput {
  create: CommentCreateWithoutSubCommentsInput!
  update: CommentUpdateWithoutSubCommentsInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutFeedItemInput {
  create: CommentCreateWithoutFeedItemInput!
  update: CommentUpdateWithoutFeedItemInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  update: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringNullableFilter
  id: StringFilter
  likes: CommentLikeListRelationFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  parentComment: CommentRelationFilter
  parentCommentId: StringNullableFilter
  subComments: CommentListRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

type EarlyAccessCode {
  claimedBy: User
  code: String!
  createdAt: Timestamp!
  isValid: Boolean!
  updatedAt: Timestamp!
  userId: String
}

input EarlyAccessCodeCreateManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  connectOrCreate: [EarlyAccessCodeCreateOrConnectWithoutclaimedByInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
}

input EarlyAccessCodeCreateOrConnectWithoutclaimedByInput {
  create: EarlyAccessCodeCreateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeCreateWithoutClaimedByInput {
  code: String!
  createdAt: Timestamp
  id: String
  isValid: Boolean
  updatedAt: Timestamp
}

input EarlyAccessCodeListRelationFilter {
  every: EarlyAccessCodeWhereInput
  none: EarlyAccessCodeWhereInput
  some: EarlyAccessCodeWhereInput
}

input EarlyAccessCodeOrderByInput {
  code: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isValid: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum EarlyAccessCodeScalarFieldEnum {
  code
  createdAt
  id
  isValid
  updatedAt
  userId
}

input EarlyAccessCodeScalarWhereInput {
  AND: [EarlyAccessCodeScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  NOT: [EarlyAccessCodeScalarWhereInput!]
  OR: [EarlyAccessCodeScalarWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpdateManyWithoutClaimedByInput {
  connect: [EarlyAccessCodeWhereUniqueInput!]
  connectOrCreate: [EarlyAccessCodeCreateOrConnectWithoutclaimedByInput!]
  create: [EarlyAccessCodeCreateWithoutClaimedByInput!]
  delete: [EarlyAccessCodeWhereUniqueInput!]
  deleteMany: [EarlyAccessCodeScalarWhereInput!]
  disconnect: [EarlyAccessCodeWhereUniqueInput!]
  set: [EarlyAccessCodeWhereUniqueInput!]
  update: [EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput!]
  updateMany: [EarlyAccessCodeUpdateManyWithWhereWithoutClaimedByInput!]
  upsert: [EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput!]
}

input EarlyAccessCodeUpdateManyWithWhereWithoutClaimedByInput {
  data: EarlyAccessCodeUpdateManyMutationInput!
  where: EarlyAccessCodeScalarWhereInput!
}

input EarlyAccessCodeUpdateWithoutClaimedByInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isValid: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EarlyAccessCodeUpdateWithWhereUniqueWithoutClaimedByInput {
  data: EarlyAccessCodeUpdateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeUpsertWithWhereUniqueWithoutClaimedByInput {
  create: EarlyAccessCodeCreateWithoutClaimedByInput!
  update: EarlyAccessCodeUpdateWithoutClaimedByInput!
  where: EarlyAccessCodeWhereUniqueInput!
}

input EarlyAccessCodeWhereInput {
  AND: [EarlyAccessCodeWhereInput!]
  claimedBy: UserRelationFilter
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isValid: BoolFilter
  NOT: [EarlyAccessCodeWhereInput!]
  OR: [EarlyAccessCodeWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input EarlyAccessCodeWhereUniqueInput {
  code: String
  id: String
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type FeedItem {
  author: User!
  authorId: String!
  commentCount: Int
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  createdAt: Timestamp!
  id: String!
  isMeLiking: Boolean
  isPublished: Boolean!
  likeCount: Int
  likes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]
  mixdown: Mixdown
  mixdownId: String
  publishAt: Timestamp
  revisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]
  text: String
  updatedAt: Timestamp!
}

type FeedItemCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  id: Int
  isPublished: Int
  mixdownId: Int
  publishAt: Int
  text: Int
  updatedAt: Int
}

input FeedItemCreateInput {
  author: UserCreateOneWithoutFeedInput!
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  mixdown: MixdownCreateOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateManyWithoutAuthorInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutauthorInput!]
  create: [FeedItemCreateWithoutAuthorInput!]
}

input FeedItemCreateManyWithoutMixdownInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutmixdownInput!]
  create: [FeedItemCreateWithoutMixdownInput!]
}

input FeedItemCreateOneWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutcommentsInput
  create: FeedItemCreateWithoutCommentsInput
}

input FeedItemCreateOneWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutlikesInput
  create: FeedItemCreateWithoutLikesInput
}

input FeedItemCreateOneWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutrevisionsInput
  create: FeedItemCreateWithoutRevisionsInput
}

input FeedItemCreateOrConnectWithoutauthorInput {
  create: FeedItemCreateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutcommentsInput {
  create: FeedItemCreateWithoutCommentsInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutlikesInput {
  create: FeedItemCreateWithoutLikesInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutmixdownInput {
  create: FeedItemCreateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateOrConnectWithoutrevisionsInput {
  create: FeedItemCreateWithoutRevisionsInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  mixdown: MixdownCreateOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutCommentsInput {
  author: UserCreateOneWithoutFeedInput!
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  mixdown: MixdownCreateOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutLikesInput {
  author: UserCreateOneWithoutFeedInput!
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdown: MixdownCreateOneWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutMixdownInput {
  author: UserCreateOneWithoutFeedInput!
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  publishAt: Timestamp
  revisions: FeedItemRevisionCreateManyWithoutParentItemInput
  text: String
  updatedAt: Timestamp
}

input FeedItemCreateWithoutRevisionsInput {
  author: UserCreateOneWithoutFeedInput!
  comments: CommentCreateManyWithoutFeedItemInput
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  likes: FeedItemLikeCreateManyWithoutFeedItemInput
  mixdown: MixdownCreateOneWithoutFeedItemInput
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

type FeedItemLike {
  createdAt: Timestamp!
  feedItem: FeedItem!
  feedItemId: String!
  user: User!
  userId: String!
}

type FeedItemLikeCountAggregate {
  _all: Int!
  createdAt: Int
  feedItemId: Int
  userId: Int
}

input FeedItemLikeCreateInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutLikesInput!
  user: UserCreateOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutfeedItemInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
}

input FeedItemLikeCreateManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutuserInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
}

input FeedItemLikeCreateOrConnectWithoutfeedItemInput {
  create: FeedItemLikeCreateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeCreateOrConnectWithoutuserInput {
  create: FeedItemLikeCreateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeCreateWithoutFeedItemInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutFeedItemLikeInput!
}

input FeedItemLikeCreateWithoutUserInput {
  createdAt: Timestamp
  feedItem: FeedItemCreateOneWithoutLikesInput!
}

input FeedItemLikeListRelationFilter {
  every: FeedItemLikeWhereInput
  none: FeedItemLikeWhereInput
  some: FeedItemLikeWhereInput
}

type FeedItemLikeMaxAggregate {
  createdAt: Timestamp
  feedItemId: String
  userId: String
}

type FeedItemLikeMinAggregate {
  createdAt: Timestamp
  feedItemId: String
  userId: String
}

input FeedItemLikeOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  userId: SortOrder
}

enum FeedItemLikeScalarFieldEnum {
  createdAt
  feedItemId
  userId
}

input FeedItemLikeScalarWhereInput {
  AND: [FeedItemLikeScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  NOT: [FeedItemLikeScalarWhereInput!]
  OR: [FeedItemLikeScalarWhereInput!]
  userId: StringFilter
}

input FeedItemLikeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemLikeUpdateManyWithoutFeedItemInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutfeedItemInput!]
  create: [FeedItemLikeCreateWithoutFeedItemInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereWithoutFeedItemInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput!]
}

input FeedItemLikeUpdateManyWithoutUserInput {
  connect: [FeedItemLikeWhereUniqueInput!]
  connectOrCreate: [FeedItemLikeCreateOrConnectWithoutuserInput!]
  create: [FeedItemLikeCreateWithoutUserInput!]
  delete: [FeedItemLikeWhereUniqueInput!]
  deleteMany: [FeedItemLikeScalarWhereInput!]
  disconnect: [FeedItemLikeWhereUniqueInput!]
  set: [FeedItemLikeWhereUniqueInput!]
  update: [FeedItemLikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FeedItemLikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [FeedItemLikeUpsertWithWhereUniqueWithoutUserInput!]
}

input FeedItemLikeUpdateManyWithWhereWithoutFeedItemInput {
  data: FeedItemLikeUpdateManyMutationInput!
  where: FeedItemLikeScalarWhereInput!
}

input FeedItemLikeUpdateManyWithWhereWithoutUserInput {
  data: FeedItemLikeUpdateManyMutationInput!
  where: FeedItemLikeScalarWhereInput!
}

input FeedItemLikeUpdateWithoutFeedItemInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFeedItemLikeInput
}

input FeedItemLikeUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  feedItem: FeedItemUpdateOneRequiredWithoutLikesInput
}

input FeedItemLikeUpdateWithWhereUniqueWithoutFeedItemInput {
  data: FeedItemLikeUpdateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpdateWithWhereUniqueWithoutUserInput {
  data: FeedItemLikeUpdateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpsertWithWhereUniqueWithoutFeedItemInput {
  create: FeedItemLikeCreateWithoutFeedItemInput!
  update: FeedItemLikeUpdateWithoutFeedItemInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUpsertWithWhereUniqueWithoutUserInput {
  create: FeedItemLikeCreateWithoutUserInput!
  update: FeedItemLikeUpdateWithoutUserInput!
  where: FeedItemLikeWhereUniqueInput!
}

input FeedItemLikeUserIdFeedItemIdCompoundUniqueInput {
  feedItemId: String!
  userId: String!
}

input FeedItemLikeWhereInput {
  AND: [FeedItemLikeWhereInput!]
  createdAt: DateTimeFilter
  feedItem: FeedItemRelationFilter
  feedItemId: StringFilter
  NOT: [FeedItemLikeWhereInput!]
  OR: [FeedItemLikeWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
}

input FeedItemLikeWhereUniqueInput {
  userId_feedItemId: FeedItemLikeUserIdFeedItemIdCompoundUniqueInput
}

input FeedItemListRelationFilter {
  every: FeedItemWhereInput
  none: FeedItemWhereInput
  some: FeedItemWhereInput
}

type FeedItemMaxAggregate {
  authorId: String
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdownId: String
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

type FeedItemMinAggregate {
  authorId: String
  createdAt: Timestamp
  id: String
  isPublished: Boolean
  mixdownId: String
  publishAt: Timestamp
  text: String
  updatedAt: Timestamp
}

input FeedItemOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPublished: SortOrder
  mixdownId: SortOrder
  publishAt: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input FeedItemRelationFilter {
  is: FeedItemWhereInput
  isNot: FeedItemWhereInput
}

type FeedItemRevision {
  createdAt: Timestamp!
  feedItemId: String!
  id: String!
  parentItem: FeedItem!
  text: String!
  updatedAt: Timestamp!
}

type FeedItemRevisionCountAggregate {
  _all: Int!
  createdAt: Int
  feedItemId: Int
  id: Int
  text: Int
  updatedAt: Int
}

input FeedItemRevisionCreateInput {
  createdAt: Timestamp
  id: String
  parentItem: FeedItemCreateOneWithoutRevisionsInput!
  text: String!
  updatedAt: Timestamp
}

input FeedItemRevisionCreateManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  connectOrCreate: [FeedItemRevisionCreateOrConnectWithoutparentItemInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
}

input FeedItemRevisionCreateOrConnectWithoutparentItemInput {
  create: FeedItemRevisionCreateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionCreateWithoutParentItemInput {
  createdAt: Timestamp
  id: String
  text: String!
  updatedAt: Timestamp
}

input FeedItemRevisionListRelationFilter {
  every: FeedItemRevisionWhereInput
  none: FeedItemRevisionWhereInput
  some: FeedItemRevisionWhereInput
}

type FeedItemRevisionMaxAggregate {
  createdAt: Timestamp
  feedItemId: String
  id: String
  text: String
  updatedAt: Timestamp
}

type FeedItemRevisionMinAggregate {
  createdAt: Timestamp
  feedItemId: String
  id: String
  text: String
  updatedAt: Timestamp
}

input FeedItemRevisionOrderByInput {
  createdAt: SortOrder
  feedItemId: SortOrder
  id: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

enum FeedItemRevisionScalarFieldEnum {
  createdAt
  feedItemId
  id
  text
  updatedAt
}

input FeedItemRevisionScalarWhereInput {
  AND: [FeedItemRevisionScalarWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  NOT: [FeedItemRevisionScalarWhereInput!]
  OR: [FeedItemRevisionScalarWhereInput!]
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentItem: FeedItemUpdateOneRequiredWithoutRevisionsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateManyWithoutParentItemInput {
  connect: [FeedItemRevisionWhereUniqueInput!]
  connectOrCreate: [FeedItemRevisionCreateOrConnectWithoutparentItemInput!]
  create: [FeedItemRevisionCreateWithoutParentItemInput!]
  delete: [FeedItemRevisionWhereUniqueInput!]
  deleteMany: [FeedItemRevisionScalarWhereInput!]
  disconnect: [FeedItemRevisionWhereUniqueInput!]
  set: [FeedItemRevisionWhereUniqueInput!]
  update: [FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput!]
  updateMany: [FeedItemRevisionUpdateManyWithWhereWithoutParentItemInput!]
  upsert: [FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput!]
}

input FeedItemRevisionUpdateManyWithWhereWithoutParentItemInput {
  data: FeedItemRevisionUpdateManyMutationInput!
  where: FeedItemRevisionScalarWhereInput!
}

input FeedItemRevisionUpdateWithoutParentItemInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemRevisionUpdateWithWhereUniqueWithoutParentItemInput {
  data: FeedItemRevisionUpdateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionUpsertWithWhereUniqueWithoutParentItemInput {
  create: FeedItemRevisionCreateWithoutParentItemInput!
  update: FeedItemRevisionUpdateWithoutParentItemInput!
  where: FeedItemRevisionWhereUniqueInput!
}

input FeedItemRevisionWhereInput {
  AND: [FeedItemRevisionWhereInput!]
  createdAt: DateTimeFilter
  feedItemId: StringFilter
  id: StringFilter
  NOT: [FeedItemRevisionWhereInput!]
  OR: [FeedItemRevisionWhereInput!]
  parentItem: FeedItemRelationFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedItemRevisionWhereUniqueInput {
  id: String
}

enum FeedItemScalarFieldEnum {
  authorId
  createdAt
  id
  isPublished
  mixdownId
  publishAt
  text
  updatedAt
}

input FeedItemScalarWhereInput {
  AND: [FeedItemScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  mixdownId: StringNullableFilter
  NOT: [FeedItemScalarWhereInput!]
  OR: [FeedItemScalarWhereInput!]
  publishAt: DateTimeNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FeedItemUpdateInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateManyWithoutAuthorInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutauthorInput!]
  create: [FeedItemCreateWithoutAuthorInput!]
  delete: [FeedItemWhereUniqueInput!]
  deleteMany: [FeedItemScalarWhereInput!]
  disconnect: [FeedItemWhereUniqueInput!]
  set: [FeedItemWhereUniqueInput!]
  update: [FeedItemUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [FeedItemUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [FeedItemUpsertWithWhereUniqueWithoutAuthorInput!]
}

input FeedItemUpdateManyWithoutMixdownInput {
  connect: [FeedItemWhereUniqueInput!]
  connectOrCreate: [FeedItemCreateOrConnectWithoutmixdownInput!]
  create: [FeedItemCreateWithoutMixdownInput!]
  delete: [FeedItemWhereUniqueInput!]
  deleteMany: [FeedItemScalarWhereInput!]
  disconnect: [FeedItemWhereUniqueInput!]
  set: [FeedItemWhereUniqueInput!]
  update: [FeedItemUpdateWithWhereUniqueWithoutMixdownInput!]
  updateMany: [FeedItemUpdateManyWithWhereWithoutMixdownInput!]
  upsert: [FeedItemUpsertWithWhereUniqueWithoutMixdownInput!]
}

input FeedItemUpdateManyWithWhereWithoutAuthorInput {
  data: FeedItemUpdateManyMutationInput!
  where: FeedItemScalarWhereInput!
}

input FeedItemUpdateManyWithWhereWithoutMixdownInput {
  data: FeedItemUpdateManyMutationInput!
  where: FeedItemScalarWhereInput!
}

input FeedItemUpdateOneRequiredWithoutLikesInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutlikesInput
  create: FeedItemCreateWithoutLikesInput
  update: FeedItemUpdateWithoutLikesInput
  upsert: FeedItemUpsertWithoutLikesInput
}

input FeedItemUpdateOneRequiredWithoutRevisionsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutrevisionsInput
  create: FeedItemCreateWithoutRevisionsInput
  update: FeedItemUpdateWithoutRevisionsInput
  upsert: FeedItemUpsertWithoutRevisionsInput
}

input FeedItemUpdateOneWithoutCommentsInput {
  connect: FeedItemWhereUniqueInput
  connectOrCreate: FeedItemCreateOrConnectWithoutcommentsInput
  create: FeedItemCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: FeedItemUpdateWithoutCommentsInput
  upsert: FeedItemUpsertWithoutCommentsInput
}

input FeedItemUpdateWithoutAuthorInput {
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutLikesInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutMixdownInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  revisions: FeedItemRevisionUpdateManyWithoutParentItemInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithoutRevisionsInput {
  author: UserUpdateOneRequiredWithoutFeedInput
  comments: CommentUpdateManyWithoutFeedItemInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPublished: BoolFieldUpdateOperationsInput
  likes: FeedItemLikeUpdateManyWithoutFeedItemInput
  mixdown: MixdownUpdateOneWithoutFeedItemInput
  publishAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeedItemUpdateWithWhereUniqueWithoutAuthorInput {
  data: FeedItemUpdateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpdateWithWhereUniqueWithoutMixdownInput {
  data: FeedItemUpdateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpsertWithoutCommentsInput {
  create: FeedItemCreateWithoutCommentsInput!
  update: FeedItemUpdateWithoutCommentsInput!
}

input FeedItemUpsertWithoutLikesInput {
  create: FeedItemCreateWithoutLikesInput!
  update: FeedItemUpdateWithoutLikesInput!
}

input FeedItemUpsertWithoutRevisionsInput {
  create: FeedItemCreateWithoutRevisionsInput!
  update: FeedItemUpdateWithoutRevisionsInput!
}

input FeedItemUpsertWithWhereUniqueWithoutAuthorInput {
  create: FeedItemCreateWithoutAuthorInput!
  update: FeedItemUpdateWithoutAuthorInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemUpsertWithWhereUniqueWithoutMixdownInput {
  create: FeedItemCreateWithoutMixdownInput!
  update: FeedItemUpdateWithoutMixdownInput!
  where: FeedItemWhereUniqueInput!
}

input FeedItemWhereInput {
  AND: [FeedItemWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPublished: BoolFilter
  likes: FeedItemLikeListRelationFilter
  mixdown: MixdownRelationFilter
  mixdownId: StringNullableFilter
  NOT: [FeedItemWhereInput!]
  OR: [FeedItemWhereInput!]
  publishAt: DateTimeNullableFilter
  revisions: FeedItemRevisionListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FeedItemWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSON
  not: JSON
}

type Mixdown {
  audio: AudioAsset!
  audioAssetId: String!
  createdAt: Timestamp!
  FeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]
  id: String!
  isPusblished: Boolean
  listens: Int!
  name: String
  project: Project!
  projectId: String!
  triggerdBy: User!
  updatedAt: Timestamp!
  userId: String!
  version: Int!
}

type MixdownAvgAggregate {
  listens: Float!
  version: Float!
}

type MixdownCountAggregate {
  _all: Int!
  audioAssetId: Int
  createdAt: Int
  id: Int
  isPusblished: Int
  listens: Int!
  name: Int
  projectId: Int
  updatedAt: Int
  userId: Int
  version: Int!
}

input MixdownCreateInput {
  audio: AudioAssetCreateOneWithoutMixdownInput!
  createdAt: Timestamp
  FeedItem: FeedItemCreateManyWithoutMixdownInput
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateOneWithoutMixdownsInput!
  triggerdBy: UserCreateOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateManyWithoutAudioInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutaudioInput!]
  create: [MixdownCreateWithoutAudioInput!]
}

input MixdownCreateManyWithoutProjectInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutprojectInput!]
  create: [MixdownCreateWithoutProjectInput!]
}

input MixdownCreateManyWithoutTriggerdByInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithouttriggerdByInput!]
  create: [MixdownCreateWithoutTriggerdByInput!]
}

input MixdownCreateOneWithoutFeedItemInput {
  connect: MixdownWhereUniqueInput
  connectOrCreate: MixdownCreateOrConnectWithoutFeedItemInput
  create: MixdownCreateWithoutFeedItemInput
}

input MixdownCreateOrConnectWithoutaudioInput {
  create: MixdownCreateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithoutFeedItemInput {
  create: MixdownCreateWithoutFeedItemInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithoutprojectInput {
  create: MixdownCreateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateOrConnectWithouttriggerdByInput {
  create: MixdownCreateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownCreateWithoutAudioInput {
  createdAt: Timestamp
  FeedItem: FeedItemCreateManyWithoutMixdownInput
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateOneWithoutMixdownsInput!
  triggerdBy: UserCreateOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutFeedItemInput {
  audio: AudioAssetCreateOneWithoutMixdownInput!
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateOneWithoutMixdownsInput!
  triggerdBy: UserCreateOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutProjectInput {
  audio: AudioAssetCreateOneWithoutMixdownInput!
  createdAt: Timestamp
  FeedItem: FeedItemCreateManyWithoutMixdownInput
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  triggerdBy: UserCreateOneWithoutMixdownInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownCreateWithoutTriggerdByInput {
  audio: AudioAssetCreateOneWithoutMixdownInput!
  createdAt: Timestamp
  FeedItem: FeedItemCreateManyWithoutMixdownInput
  id: String
  isPusblished: Boolean
  listens: Int
  name: String
  project: ProjectCreateOneWithoutMixdownsInput!
  updatedAt: Timestamp
  version: Int!
}

input MixdownListRelationFilter {
  every: MixdownWhereInput
  none: MixdownWhereInput
  some: MixdownWhereInput
}

type MixdownMaxAggregate {
  audioAssetId: String
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int!
  name: String
  projectId: String
  updatedAt: Timestamp
  userId: String
  version: Int!
}

type MixdownMinAggregate {
  audioAssetId: String
  createdAt: Timestamp
  id: String
  isPusblished: Boolean
  listens: Int!
  name: String
  projectId: String
  updatedAt: Timestamp
  userId: String
  version: Int!
}

input MixdownOrderByInput {
  audioAssetId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPusblished: SortOrder
  listens: SortOrder
  name: SortOrder
  projectId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  version: SortOrder
}

input MixdownRelationFilter {
  is: MixdownWhereInput
  isNot: MixdownWhereInput
}

enum MixdownScalarFieldEnum {
  audioAssetId
  createdAt
  id
  isPusblished
  listens
  name
  projectId
  updatedAt
  userId
  version
}

input MixdownScalarWhereInput {
  AND: [MixdownScalarWhereInput!]
  audioAssetId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPusblished: BoolNullableFilter
  listens: IntFilter
  name: StringNullableFilter
  NOT: [MixdownScalarWhereInput!]
  OR: [MixdownScalarWhereInput!]
  projectId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  version: IntFilter
}

type MixdownSumAggregate {
  listens: Int!
  version: Int!
}

input MixdownUpdateInput {
  audio: AudioAssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateManyWithoutAudioInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutaudioInput!]
  create: [MixdownCreateWithoutAudioInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutAudioInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutAudioInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutAudioInput!]
}

input MixdownUpdateManyWithoutProjectInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithoutprojectInput!]
  create: [MixdownCreateWithoutProjectInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutProjectInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutProjectInput!]
}

input MixdownUpdateManyWithoutTriggerdByInput {
  connect: [MixdownWhereUniqueInput!]
  connectOrCreate: [MixdownCreateOrConnectWithouttriggerdByInput!]
  create: [MixdownCreateWithoutTriggerdByInput!]
  delete: [MixdownWhereUniqueInput!]
  deleteMany: [MixdownScalarWhereInput!]
  disconnect: [MixdownWhereUniqueInput!]
  set: [MixdownWhereUniqueInput!]
  update: [MixdownUpdateWithWhereUniqueWithoutTriggerdByInput!]
  updateMany: [MixdownUpdateManyWithWhereWithoutTriggerdByInput!]
  upsert: [MixdownUpsertWithWhereUniqueWithoutTriggerdByInput!]
}

input MixdownUpdateManyWithWhereWithoutAudioInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateManyWithWhereWithoutProjectInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateManyWithWhereWithoutTriggerdByInput {
  data: MixdownUpdateManyMutationInput!
  where: MixdownScalarWhereInput!
}

input MixdownUpdateOneWithoutFeedItemInput {
  connect: MixdownWhereUniqueInput
  connectOrCreate: MixdownCreateOrConnectWithoutFeedItemInput
  create: MixdownCreateWithoutFeedItemInput
  delete: Boolean
  disconnect: Boolean
  update: MixdownUpdateWithoutFeedItemInput
  upsert: MixdownUpsertWithoutFeedItemInput
}

input MixdownUpdateWithoutAudioInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutFeedItemInput {
  audio: AudioAssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutProjectInput {
  audio: AudioAssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  triggerdBy: UserUpdateOneRequiredWithoutMixdownInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithoutTriggerdByInput {
  audio: AudioAssetUpdateOneRequiredWithoutMixdownInput
  createdAt: DateTimeFieldUpdateOperationsInput
  FeedItem: FeedItemUpdateManyWithoutMixdownInput
  id: StringFieldUpdateOperationsInput
  isPusblished: NullableBoolFieldUpdateOperationsInput
  listens: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMixdownsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: IntFieldUpdateOperationsInput
}

input MixdownUpdateWithWhereUniqueWithoutAudioInput {
  data: MixdownUpdateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpdateWithWhereUniqueWithoutProjectInput {
  data: MixdownUpdateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpdateWithWhereUniqueWithoutTriggerdByInput {
  data: MixdownUpdateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithoutFeedItemInput {
  create: MixdownCreateWithoutFeedItemInput!
  update: MixdownUpdateWithoutFeedItemInput!
}

input MixdownUpsertWithWhereUniqueWithoutAudioInput {
  create: MixdownCreateWithoutAudioInput!
  update: MixdownUpdateWithoutAudioInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithWhereUniqueWithoutProjectInput {
  create: MixdownCreateWithoutProjectInput!
  update: MixdownUpdateWithoutProjectInput!
  where: MixdownWhereUniqueInput!
}

input MixdownUpsertWithWhereUniqueWithoutTriggerdByInput {
  create: MixdownCreateWithoutTriggerdByInput!
  update: MixdownUpdateWithoutTriggerdByInput!
  where: MixdownWhereUniqueInput!
}

input MixdownWhereInput {
  AND: [MixdownWhereInput!]
  audio: AudioAssetRelationFilter
  audioAssetId: StringFilter
  createdAt: DateTimeFilter
  FeedItem: FeedItemListRelationFilter
  id: StringFilter
  isPusblished: BoolNullableFilter
  listens: IntFilter
  name: StringNullableFilter
  NOT: [MixdownWhereInput!]
  OR: [MixdownWhereInput!]
  project: ProjectRelationFilter
  projectId: StringFilter
  triggerdBy: UserRelationFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  version: IntFilter
}

input MixdownWhereUniqueInput {
  id: String
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createBand(data: BandCreateInput!): Band!
  createComment(data: CommentCreateInput!): Comment!
  createCommentLike(data: CommentLikeCreateInput!): CommentLike!
  createFeedItem(data: FeedItemCreateInput!): FeedItem!
  createFeedItemLike(data: FeedItemLikeCreateInput!): FeedItemLike!
  createFeedItemRevision(data: FeedItemRevisionCreateInput!): FeedItemRevision!
  createMixdown(data: MixdownCreateInput!): Mixdown!
  createProject(data: ProjectCreateInput!): Project!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  createUsersOnProjects(data: UsersOnProjectsCreateInput!): UsersOnProjects!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteBand(where: BandWhereUniqueInput!): Band
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCommentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  deleteFeedItem(where: FeedItemWhereUniqueInput!): FeedItem
  deleteFeedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  deleteFeedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  deleteManyAddress(where: AddressWhereInput): BatchPayload!
  deleteManyBand(where: BandWhereInput): BatchPayload!
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteManyCommentLike(where: CommentLikeWhereInput): BatchPayload!
  deleteManyFeedItem(where: FeedItemWhereInput): BatchPayload!
  deleteManyFeedItemLike(where: FeedItemLikeWhereInput): BatchPayload!
  deleteManyFeedItemRevision(where: FeedItemRevisionWhereInput): BatchPayload!
  deleteManyMixdown(where: MixdownWhereInput): BatchPayload!
  deleteManyProject(where: ProjectWhereInput): BatchPayload!
  deleteManyTag(where: TagWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyUsersOnProjects(where: UsersOnProjectsWhereInput): BatchPayload!
  deleteMixdown(where: MixdownWhereUniqueInput!): Mixdown
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  signUpUser(data: UserSignUpInput!): User!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateBand(data: BandUpdateInput!, where: BandWhereUniqueInput!): Band
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCommentLike(data: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike
  updateFeedItem(data: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem
  updateFeedItemLike(data: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  updateFeedItemRevision(data: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyBand(data: BandUpdateManyMutationInput!, where: BandWhereInput): BatchPayload!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyCommentLike(data: CommentLikeUpdateManyMutationInput!, where: CommentLikeWhereInput): BatchPayload!
  updateManyFeedItem(data: FeedItemUpdateManyMutationInput!, where: FeedItemWhereInput): BatchPayload!
  updateManyFeedItemLike(data: FeedItemLikeUpdateManyMutationInput!, where: FeedItemLikeWhereInput): BatchPayload!
  updateManyFeedItemRevision(data: FeedItemRevisionUpdateManyMutationInput!, where: FeedItemRevisionWhereInput): BatchPayload!
  updateManyMixdown(data: MixdownUpdateManyMutationInput!, where: MixdownWhereInput): BatchPayload!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUsersOnProjects(data: UsersOnProjectsUpdateManyMutationInput!, where: UsersOnProjectsWhereInput): BatchPayload!
  updateMixdown(data: MixdownUpdateInput!, where: MixdownWhereUniqueInput!): Mixdown
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUsersOnProjects(data: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  upsertAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertBand(create: BandCreateInput!, update: BandUpdateInput!, where: BandWhereUniqueInput!): Band!
  upsertComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertCommentLike(create: CommentLikeCreateInput!, update: CommentLikeUpdateInput!, where: CommentLikeWhereUniqueInput!): CommentLike!
  upsertFeedItem(create: FeedItemCreateInput!, update: FeedItemUpdateInput!, where: FeedItemWhereUniqueInput!): FeedItem!
  upsertFeedItemLike(create: FeedItemLikeCreateInput!, update: FeedItemLikeUpdateInput!, where: FeedItemLikeWhereUniqueInput!): FeedItemLike!
  upsertFeedItemRevision(create: FeedItemRevisionCreateInput!, update: FeedItemRevisionUpdateInput!, where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision!
  upsertMixdown(create: MixdownCreateInput!, update: MixdownUpdateInput!, where: MixdownWhereUniqueInput!): Mixdown!
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUsersOnProjects(create: UsersOnProjectsCreateInput!, update: UsersOnProjectsUpdateInput!, where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  content: JSON!
  createdAt: Timestamp!
  id: String!
  isPrivate: Boolean!
  members(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]
  mixdowns(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]
  name: String!
  owner: User!
  ownerId: String!
  updatedAt: Timestamp!
}

type ProjectCountAggregate {
  _all: Int!
  content: Int
  createdAt: Int
  id: Int
  isPrivate: Int
  name: Int
  ownerId: Int
  updatedAt: Int
}

input ProjectCreateInput {
  content: JSON!
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  members: UsersOnProjectsCreateManyWithoutProjectInput
  mixdowns: MixdownCreateManyWithoutProjectInput
  name: String
  owner: UserCreateOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutownerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
}

input ProjectCreateOneWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutmembersInput
  create: ProjectCreateWithoutMembersInput
}

input ProjectCreateOneWithoutMixdownsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutmixdownsInput
  create: ProjectCreateWithoutMixdownsInput
}

input ProjectCreateOrConnectWithoutmembersInput {
  create: ProjectCreateWithoutMembersInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutmixdownsInput {
  create: ProjectCreateWithoutMixdownsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutownerInput {
  create: ProjectCreateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutMembersInput {
  content: JSON!
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  mixdowns: MixdownCreateManyWithoutProjectInput
  name: String
  owner: UserCreateOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutMixdownsInput {
  content: JSON!
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  members: UsersOnProjectsCreateManyWithoutProjectInput
  name: String
  owner: UserCreateOneWithoutOwnsProjectsInput!
  updatedAt: Timestamp
}

input ProjectCreateWithoutOwnerInput {
  content: JSON!
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  members: UsersOnProjectsCreateManyWithoutProjectInput
  mixdowns: MixdownCreateManyWithoutProjectInput
  name: String
  updatedAt: Timestamp
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMaxAggregate {
  content: JSON
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  name: String
  ownerId: String
  updatedAt: Timestamp
}

type ProjectMinAggregate {
  content: JSON
  createdAt: Timestamp
  id: String
  isPrivate: Boolean
  name: String
  ownerId: String
  updatedAt: Timestamp
}

input ProjectOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPrivate: SortOrder
  name: SortOrder
  ownerId: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  content
  createdAt
  id
  isPrivate
  name
  ownerId
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  content: JsonFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPrivate: BoolFilter
  name: StringFilter
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectUpdateInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutownerInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateManyWithWhereWithoutOwnerInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutmembersInput
  create: ProjectCreateWithoutMembersInput
  update: ProjectUpdateWithoutMembersInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateOneRequiredWithoutMixdownsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutmixdownsInput
  create: ProjectCreateWithoutMixdownsInput
  update: ProjectUpdateWithoutMixdownsInput
  upsert: ProjectUpsertWithoutMixdownsInput
}

input ProjectUpdateWithoutMembersInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutMixdownsInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutOwnsProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutOwnerInput {
  content: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isPrivate: BoolFieldUpdateOperationsInput
  members: UsersOnProjectsUpdateManyWithoutProjectInput
  mixdowns: MixdownUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  update: ProjectUpdateWithoutMembersInput!
}

input ProjectUpsertWithoutMixdownsInput {
  create: ProjectCreateWithoutMixdownsInput!
  update: ProjectUpdateWithoutMixdownsInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  content: JsonFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPrivate: BoolFilter
  members: UsersOnProjectsListRelationFilter
  mixdowns: MixdownListRelationFilter
  name: StringFilter
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  owner: UserRelationFilter
  ownerId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAddress(cursor: AddressWhereUniqueInput, orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateBand(cursor: BandWhereUniqueInput, orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): AggregateBand!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateCommentLike(cursor: CommentLikeWhereUniqueInput, orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): AggregateCommentLike!
  aggregateFeedItem(cursor: FeedItemWhereUniqueInput, orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): AggregateFeedItem!
  aggregateFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): AggregateFeedItemLike!
  aggregateFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): AggregateFeedItemRevision!
  aggregateMixdown(cursor: MixdownWhereUniqueInput, orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): AggregateMixdown!
  aggregateProject(cursor: ProjectWhereUniqueInput, orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): AggregateUsersOnProjects!
  band(where: BandWhereUniqueInput!): Band
  bands(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): [Band!]!
  comment(where: CommentWhereUniqueInput!): Comment
  commentLike(where: CommentLikeWhereUniqueInput!): CommentLike
  commentLikes(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  feedItem(where: FeedItemWhereUniqueInput!): FeedItem
  feedItemLike(where: FeedItemLikeWhereUniqueInput!): FeedItemLike
  feedItemLikes(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]!
  feedItemRevision(where: FeedItemRevisionWhereUniqueInput!): FeedItemRevision
  feedItemRevisions(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): [FeedItemRevision!]!
  feedItems(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]!
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstBand(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): Band
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): CommentLike
  findFirstFeedItem(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): FeedItem
  findFirstFeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): FeedItemLike
  findFirstFeedItemRevision(cursor: FeedItemRevisionWhereUniqueInput, distinct: [FeedItemRevisionScalarFieldEnum!], orderBy: [FeedItemRevisionOrderByInput!], skip: Int, take: Int, where: FeedItemRevisionWhereInput): FeedItemRevision
  findFirstMixdown(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): Mixdown
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): Project
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): UsersOnProjects
  findManyUsersOnProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]!
  findUniqueUsersOnProjects(where: UsersOnProjectsWhereUniqueInput!): UsersOnProjects
  followRecommendations: [User!]!
  me: User!
  mixdown(where: MixdownWhereUniqueInput!): Mixdown
  mixdowns(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newComment(feedItemId: String!): Comment!
  onlineStatus(userId: String!): Boolean!
}

type Tag {
  User: User
  userId: String
  value: String!
}

type TagCountAggregate {
  _all: Int!
  id: Int
  userId: Int
  value: Int
}

input TagCreateInput {
  id: String
  User: UserCreateOneWithoutInterestsInput
  value: String!
}

input TagCreateManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUserInput!]
  create: [TagCreateWithoutUserInput!]
}

input TagCreateOrConnectWithoutUserInput {
  create: TagCreateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutUserInput {
  id: String
  value: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

type TagMaxAggregate {
  id: String
  userId: String
  value: String
}

type TagMinAggregate {
  id: String
  userId: String
  value: String
}

input TagOrderByInput {
  id: SortOrder
  userId: SortOrder
  value: SortOrder
}

enum TagScalarFieldEnum {
  id
  userId
  value
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  id: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  userId: StringNullableFilter
  value: StringFilter
}

input TagUpdateInput {
  id: StringFieldUpdateOperationsInput
  User: UserUpdateOneWithoutInterestsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutUserInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUserInput!]
  create: [TagCreateWithoutUserInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TagUpdateManyWithWhereWithoutUserInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutUserInput!]
}

input TagUpdateManyWithWhereWithoutUserInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutUserInput {
  data: TagUpdateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutUserInput {
  create: TagCreateWithoutUserInput!
  update: TagUpdateWithoutUserInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  id: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  User: UserRelationFilter
  userId: StringNullableFilter
  value: StringFilter
}

input TagWhereUniqueInput {
  id: String
  value: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  address: Address
  addressId: String
  AudioAsset(cursor: AudioAssetWhereUniqueInput, distinct: [AudioAssetScalarFieldEnum!], orderBy: [AudioAssetOrderByInput!], skip: Int, take: Int, where: AudioAssetWhereInput): [AudioAsset!]
  avatar: String
  bio: String
  Comment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  CommentLike(cursor: CommentLikeWhereUniqueInput, distinct: [CommentLikeScalarFieldEnum!], orderBy: [CommentLikeOrderByInput!], skip: Int, take: Int, where: CommentLikeWhereInput): [CommentLike!]
  createdAt: Timestamp!
  EarlyAccessCode(cursor: EarlyAccessCodeWhereUniqueInput, distinct: [EarlyAccessCodeScalarFieldEnum!], orderBy: [EarlyAccessCodeOrderByInput!], skip: Int, take: Int, where: EarlyAccessCodeWhereInput): [EarlyAccessCode!]
  email: String!
  feed(cursor: FeedItemWhereUniqueInput, distinct: [FeedItemScalarFieldEnum!], orderBy: [FeedItemOrderByInput!], skip: Int, take: Int, where: FeedItemWhereInput): [FeedItem!]
  FeedItemLike(cursor: FeedItemLikeWhereUniqueInput, distinct: [FeedItemLikeScalarFieldEnum!], orderBy: [FeedItemLikeOrderByInput!], skip: Int, take: Int, where: FeedItemLikeWhereInput): [FeedItemLike!]
  followedBy(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  followedByCount: Int
  following(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  followingCount: Int
  handle: String!
  id: String!
  interests(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]
  isMeFollowing: Boolean
  isMyself: Boolean
  isOnline: Boolean!
  memberOfBands(cursor: UsersOnBandsWhereUniqueInput, distinct: [UsersOnBandsScalarFieldEnum!], orderBy: [UsersOnBandsOrderByInput!], skip: Int, take: Int, where: UsersOnBandsWhereInput): [UsersOnBands!]
  memberOfProjects(cursor: UsersOnProjectsWhereUniqueInput, distinct: [UsersOnProjectsScalarFieldEnum!], orderBy: [UsersOnProjectsOrderByInput!], skip: Int, take: Int, where: UsersOnProjectsWhereInput): [UsersOnProjects!]
  Mixdown(cursor: MixdownWhereUniqueInput, distinct: [MixdownScalarFieldEnum!], orderBy: [MixdownOrderByInput!], skip: Int, take: Int, where: MixdownWhereInput): [Mixdown!]
  name: String!
  ownsBands(cursor: BandWhereUniqueInput, distinct: [BandScalarFieldEnum!], orderBy: [BandOrderByInput!], skip: Int, take: Int, where: BandWhereInput): [Band!]
  ownsProjects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]
  role: Role!
  updatedAt: Timestamp!
  website: String
}

type UserCountAggregate {
  _all: Int!
  addressId: Int
  avatar: Int
  bio: Int
  createdAt: Int
  email: Int
  handle: Int
  id: Int
  isOnline: Int
  name: Int
  password: Int
  role: Int
  updatedAt: Int
  website: Int
}

input UserCreateInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutaddressInput!]
  create: [UserCreateWithoutAddressInput!]
}

input UserCreateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutfollowedByInput!]
  create: [UserCreateWithoutFollowedByInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutfollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateOneWithoutAudioAssetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAudioAssetInput
  create: UserCreateWithoutAudioAssetInput
}

input UserCreateOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
}

input UserCreateOneWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentLikeInput
  create: UserCreateWithoutCommentLikeInput
}

input UserCreateOneWithoutFeedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutfeedInput
  create: UserCreateWithoutFeedInput
}

input UserCreateOneWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedItemLikeInput
  create: UserCreateWithoutFeedItemLikeInput
}

input UserCreateOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutinterestsInput
  create: UserCreateWithoutInterestsInput
}

input UserCreateOneWithoutMemberOfBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutmemberOfBandsInput
  create: UserCreateWithoutMemberOfBandsInput
}

input UserCreateOneWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutmemberOfProjectsInput
  create: UserCreateWithoutMemberOfProjectsInput
}

input UserCreateOneWithoutMixdownInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMixdownInput
  create: UserCreateWithoutMixdownInput
}

input UserCreateOneWithoutOwnsBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutownsBandsInput
  create: UserCreateWithoutOwnsBandsInput
}

input UserCreateOneWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutownsProjectsInput
  create: UserCreateWithoutOwnsProjectsInput
}

input UserCreateOrConnectWithoutaddressInput {
  create: UserCreateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutAudioAssetInput {
  create: UserCreateWithoutAudioAssetInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentLikeInput {
  create: UserCreateWithoutCommentLikeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutfeedInput {
  create: UserCreateWithoutFeedInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFeedItemLikeInput {
  create: UserCreateWithoutFeedItemLikeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutfollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutfollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutinterestsInput {
  create: UserCreateWithoutInterestsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutmemberOfBandsInput {
  create: UserCreateWithoutMemberOfBandsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutmemberOfProjectsInput {
  create: UserCreateWithoutMemberOfProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMixdownInput {
  create: UserCreateWithoutMixdownInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutownsBandsInput {
  create: UserCreateWithoutOwnsBandsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutownsProjectsInput {
  create: UserCreateWithoutOwnsProjectsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAddressInput {
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutAudioAssetInput {
  address: AddressCreateOneWithoutUserInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutCommentInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutCommentLikeInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFeedInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFeedItemLikeInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFollowedByInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutFollowingInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutInterestsInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMemberOfBandsInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMemberOfProjectsInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutMixdownInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutOwnsBandsInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsProjects: ProjectCreateManyWithoutOwnerInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserCreateWithoutOwnsProjectsInput {
  address: AddressCreateOneWithoutUserInput
  AudioAsset: AudioAssetCreateManyWithoutOwnerInput
  avatar: String
  bio: String
  Comment: CommentCreateManyWithoutAuthorInput
  CommentLike: CommentLikeCreateManyWithoutUserInput
  createdAt: Timestamp
  EarlyAccessCode: EarlyAccessCodeCreateManyWithoutClaimedByInput
  email: String!
  feed: FeedItemCreateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeCreateManyWithoutUserInput
  followedBy: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowedByInput
  handle: String!
  id: String
  interests: TagCreateManyWithoutUserInput
  isOnline: Boolean
  memberOfBands: UsersOnBandsCreateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsCreateManyWithoutUserInput
  Mixdown: MixdownCreateManyWithoutTriggerdByInput
  name: String!
  ownsBands: BandCreateManyWithoutCreatedByInput
  password: String!
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  addressId: String
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String
  handle: String
  id: String
  isOnline: Boolean
  name: String
  password: String
  role: Role
  updatedAt: Timestamp
  website: String
}

type UserMinAggregate {
  addressId: String
  avatar: String
  bio: String
  createdAt: Timestamp
  email: String
  handle: String
  id: String
  isOnline: Boolean
  name: String
  password: String
  role: Role
  updatedAt: Timestamp
  website: String
}

input UserOrderByInput {
  addressId: SortOrder
  avatar: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  email: SortOrder
  handle: SortOrder
  id: SortOrder
  isOnline: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  addressId
  avatar
  bio
  createdAt
  email
  handle
  id
  isOnline
  name
  password
  role
  updatedAt
  website
}

input UserScalarWhereInput {
  addressId: StringNullableFilter
  AND: [UserScalarWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  handle: StringFilter
  id: StringFilter
  isOnline: BoolFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserSignUpInput {
  accessCode: String!
  email: String!
  handle: String!
  name: String!
  password: String!
}

type UsersOnBands {
  bandId: String!
  createdAt: Timestamp!
  userId: String!
}

input UsersOnBandsCreateManyWithoutBandInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutbandInput!]
  create: [UsersOnBandsCreateWithoutBandInput!]
}

input UsersOnBandsCreateManyWithoutUserInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutuserInput!]
  create: [UsersOnBandsCreateWithoutUserInput!]
}

input UsersOnBandsCreateOrConnectWithoutbandInput {
  create: UsersOnBandsCreateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsCreateOrConnectWithoutuserInput {
  create: UsersOnBandsCreateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsCreateWithoutBandInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutMemberOfBandsInput!
}

input UsersOnBandsCreateWithoutUserInput {
  band: BandCreateOneWithoutMembersInput!
  createdAt: Timestamp
}

input UsersOnBandsListRelationFilter {
  every: UsersOnBandsWhereInput
  none: UsersOnBandsWhereInput
  some: UsersOnBandsWhereInput
}

input UsersOnBandsOrderByInput {
  bandId: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

enum UsersOnBandsScalarFieldEnum {
  bandId
  createdAt
  userId
}

input UsersOnBandsScalarWhereInput {
  AND: [UsersOnBandsScalarWhereInput!]
  bandId: StringFilter
  createdAt: DateTimeFilter
  NOT: [UsersOnBandsScalarWhereInput!]
  OR: [UsersOnBandsScalarWhereInput!]
  userId: StringFilter
}

input UsersOnBandsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnBandsUpdateManyWithoutBandInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutbandInput!]
  create: [UsersOnBandsCreateWithoutBandInput!]
  delete: [UsersOnBandsWhereUniqueInput!]
  deleteMany: [UsersOnBandsScalarWhereInput!]
  disconnect: [UsersOnBandsWhereUniqueInput!]
  set: [UsersOnBandsWhereUniqueInput!]
  update: [UsersOnBandsUpdateWithWhereUniqueWithoutBandInput!]
  updateMany: [UsersOnBandsUpdateManyWithWhereWithoutBandInput!]
  upsert: [UsersOnBandsUpsertWithWhereUniqueWithoutBandInput!]
}

input UsersOnBandsUpdateManyWithoutUserInput {
  connect: [UsersOnBandsWhereUniqueInput!]
  connectOrCreate: [UsersOnBandsCreateOrConnectWithoutuserInput!]
  create: [UsersOnBandsCreateWithoutUserInput!]
  delete: [UsersOnBandsWhereUniqueInput!]
  deleteMany: [UsersOnBandsScalarWhereInput!]
  disconnect: [UsersOnBandsWhereUniqueInput!]
  set: [UsersOnBandsWhereUniqueInput!]
  update: [UsersOnBandsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnBandsUpdateManyWithWhereWithoutUserInput!]
  upsert: [UsersOnBandsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnBandsUpdateManyWithWhereWithoutBandInput {
  data: UsersOnBandsUpdateManyMutationInput!
  where: UsersOnBandsScalarWhereInput!
}

input UsersOnBandsUpdateManyWithWhereWithoutUserInput {
  data: UsersOnBandsUpdateManyMutationInput!
  where: UsersOnBandsScalarWhereInput!
}

input UsersOnBandsUpdateWithoutBandInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMemberOfBandsInput
}

input UsersOnBandsUpdateWithoutUserInput {
  band: BandUpdateOneRequiredWithoutMembersInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnBandsUpdateWithWhereUniqueWithoutBandInput {
  data: UsersOnBandsUpdateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnBandsUpdateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpsertWithWhereUniqueWithoutBandInput {
  create: UsersOnBandsCreateWithoutBandInput!
  update: UsersOnBandsUpdateWithoutBandInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnBandsCreateWithoutUserInput!
  update: UsersOnBandsUpdateWithoutUserInput!
  where: UsersOnBandsWhereUniqueInput!
}

input UsersOnBandsUserIdBandIdCompoundUniqueInput {
  bandId: String!
  userId: String!
}

input UsersOnBandsWhereInput {
  AND: [UsersOnBandsWhereInput!]
  band: BandRelationFilter
  bandId: StringFilter
  createdAt: DateTimeFilter
  NOT: [UsersOnBandsWhereInput!]
  OR: [UsersOnBandsWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
}

input UsersOnBandsWhereUniqueInput {
  userId_bandId: UsersOnBandsUserIdBandIdCompoundUniqueInput
}

type UsersOnProjects {
  createdAt: Timestamp!
  project: Project!
  projectId: String!
  user: User!
  userId: String!
}

type UsersOnProjectsCountAggregate {
  _all: Int!
  createdAt: Int
  projectId: Int
  userId: Int
}

input UsersOnProjectsCreateInput {
  createdAt: Timestamp
  project: ProjectCreateOneWithoutMembersInput!
  user: UserCreateOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutprojectInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
}

input UsersOnProjectsCreateManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutuserInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
}

input UsersOnProjectsCreateOrConnectWithoutprojectInput {
  create: UsersOnProjectsCreateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsCreateOrConnectWithoutuserInput {
  create: UsersOnProjectsCreateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsCreateWithoutProjectInput {
  createdAt: Timestamp
  user: UserCreateOneWithoutMemberOfProjectsInput!
}

input UsersOnProjectsCreateWithoutUserInput {
  createdAt: Timestamp
  project: ProjectCreateOneWithoutMembersInput!
}

input UsersOnProjectsListRelationFilter {
  every: UsersOnProjectsWhereInput
  none: UsersOnProjectsWhereInput
  some: UsersOnProjectsWhereInput
}

type UsersOnProjectsMaxAggregate {
  createdAt: Timestamp
  projectId: String
  userId: String
}

type UsersOnProjectsMinAggregate {
  createdAt: Timestamp
  projectId: String
  userId: String
}

input UsersOnProjectsOrderByInput {
  createdAt: SortOrder
  projectId: SortOrder
  userId: SortOrder
}

enum UsersOnProjectsScalarFieldEnum {
  createdAt
  projectId
  userId
}

input UsersOnProjectsScalarWhereInput {
  AND: [UsersOnProjectsScalarWhereInput!]
  createdAt: DateTimeFilter
  NOT: [UsersOnProjectsScalarWhereInput!]
  OR: [UsersOnProjectsScalarWhereInput!]
  projectId: StringFilter
  userId: StringFilter
}

input UsersOnProjectsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UsersOnProjectsUpdateManyWithoutProjectInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutprojectInput!]
  create: [UsersOnProjectsCreateWithoutProjectInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereWithoutProjectInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput!]
}

input UsersOnProjectsUpdateManyWithoutUserInput {
  connect: [UsersOnProjectsWhereUniqueInput!]
  connectOrCreate: [UsersOnProjectsCreateOrConnectWithoutuserInput!]
  create: [UsersOnProjectsCreateWithoutUserInput!]
  delete: [UsersOnProjectsWhereUniqueInput!]
  deleteMany: [UsersOnProjectsScalarWhereInput!]
  disconnect: [UsersOnProjectsWhereUniqueInput!]
  set: [UsersOnProjectsWhereUniqueInput!]
  update: [UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnProjectsUpdateManyWithWhereWithoutUserInput!]
  upsert: [UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput!]
}

input UsersOnProjectsUpdateManyWithWhereWithoutProjectInput {
  data: UsersOnProjectsUpdateManyMutationInput!
  where: UsersOnProjectsScalarWhereInput!
}

input UsersOnProjectsUpdateManyWithWhereWithoutUserInput {
  data: UsersOnProjectsUpdateManyMutationInput!
  where: UsersOnProjectsScalarWhereInput!
}

input UsersOnProjectsUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMemberOfProjectsInput
}

input UsersOnProjectsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutProjectInput {
  data: UsersOnProjectsUpdateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpdateWithWhereUniqueWithoutUserInput {
  data: UsersOnProjectsUpdateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutProjectInput {
  create: UsersOnProjectsCreateWithoutProjectInput!
  update: UsersOnProjectsUpdateWithoutProjectInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUpsertWithWhereUniqueWithoutUserInput {
  create: UsersOnProjectsCreateWithoutUserInput!
  update: UsersOnProjectsUpdateWithoutUserInput!
  where: UsersOnProjectsWhereUniqueInput!
}

input UsersOnProjectsUserIdProjectIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UsersOnProjectsWhereInput {
  AND: [UsersOnProjectsWhereInput!]
  createdAt: DateTimeFilter
  NOT: [UsersOnProjectsWhereInput!]
  OR: [UsersOnProjectsWhereInput!]
  project: ProjectRelationFilter
  projectId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input UsersOnProjectsWhereUniqueInput {
  userId_projectId: UsersOnProjectsUserIdProjectIdCompoundUniqueInput
}

input UserUpdateInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isOnline: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutAddressInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutaddressInput!]
  create: [UserCreateWithoutAddressInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [UserUpdateManyWithWhereWithoutAddressInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAddressInput!]
}

input UserUpdateManyWithoutFollowedByInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutfollowedByInput!]
  create: [UserCreateWithoutFollowedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowedByInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowedByInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowedByInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutfollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithWhereWithoutAddressInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowedByInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowingInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
  update: UserUpdateWithoutCommentInput
  upsert: UserUpsertWithoutCommentInput
}

input UserUpdateOneRequiredWithoutCommentLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentLikeInput
  create: UserCreateWithoutCommentLikeInput
  update: UserUpdateWithoutCommentLikeInput
  upsert: UserUpsertWithoutCommentLikeInput
}

input UserUpdateOneRequiredWithoutFeedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutfeedInput
  create: UserCreateWithoutFeedInput
  update: UserUpdateWithoutFeedInput
  upsert: UserUpsertWithoutFeedInput
}

input UserUpdateOneRequiredWithoutFeedItemLikeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFeedItemLikeInput
  create: UserCreateWithoutFeedItemLikeInput
  update: UserUpdateWithoutFeedItemLikeInput
  upsert: UserUpsertWithoutFeedItemLikeInput
}

input UserUpdateOneRequiredWithoutMemberOfBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutmemberOfBandsInput
  create: UserCreateWithoutMemberOfBandsInput
  update: UserUpdateWithoutMemberOfBandsInput
  upsert: UserUpsertWithoutMemberOfBandsInput
}

input UserUpdateOneRequiredWithoutMemberOfProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutmemberOfProjectsInput
  create: UserCreateWithoutMemberOfProjectsInput
  update: UserUpdateWithoutMemberOfProjectsInput
  upsert: UserUpsertWithoutMemberOfProjectsInput
}

input UserUpdateOneRequiredWithoutMixdownInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMixdownInput
  create: UserCreateWithoutMixdownInput
  update: UserUpdateWithoutMixdownInput
  upsert: UserUpsertWithoutMixdownInput
}

input UserUpdateOneRequiredWithoutOwnsBandsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutownsBandsInput
  create: UserCreateWithoutOwnsBandsInput
  update: UserUpdateWithoutOwnsBandsInput
  upsert: UserUpsertWithoutOwnsBandsInput
}

input UserUpdateOneRequiredWithoutOwnsProjectsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutownsProjectsInput
  create: UserCreateWithoutOwnsProjectsInput
  update: UserUpdateWithoutOwnsProjectsInput
  upsert: UserUpsertWithoutOwnsProjectsInput
}

input UserUpdateOneWithoutAudioAssetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAudioAssetInput
  create: UserCreateWithoutAudioAssetInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAudioAssetInput
  upsert: UserUpsertWithoutAudioAssetInput
}

input UserUpdateOneWithoutInterestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutinterestsInput
  create: UserCreateWithoutInterestsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInterestsInput
  upsert: UserUpsertWithoutInterestsInput
}

input UserUpdateWithoutAddressInput {
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutAudioAssetInput {
  address: AddressUpdateOneWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentLikeInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFeedItemLikeInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowedByInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowingInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutInterestsInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMemberOfBandsInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMemberOfProjectsInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutMixdownInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOwnsBandsInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsProjects: ProjectUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutOwnsProjectsInput {
  address: AddressUpdateOneWithoutUserInput
  AudioAsset: AudioAssetUpdateManyWithoutOwnerInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  Comment: CommentUpdateManyWithoutAuthorInput
  CommentLike: CommentLikeUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  EarlyAccessCode: EarlyAccessCodeUpdateManyWithoutClaimedByInput
  email: StringFieldUpdateOperationsInput
  feed: FeedItemUpdateManyWithoutAuthorInput
  FeedItemLike: FeedItemLikeUpdateManyWithoutUserInput
  followedBy: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowedByInput
  handle: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  interests: TagUpdateManyWithoutUserInput
  isOnline: BoolFieldUpdateOperationsInput
  memberOfBands: UsersOnBandsUpdateManyWithoutUserInput
  memberOfProjects: UsersOnProjectsUpdateManyWithoutUserInput
  Mixdown: MixdownUpdateManyWithoutTriggerdByInput
  name: StringFieldUpdateOperationsInput
  ownsBands: BandUpdateManyWithoutCreatedByInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutAddressInput {
  data: UserUpdateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowedByInput {
  data: UserUpdateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAudioAssetInput {
  create: UserCreateWithoutAudioAssetInput!
  update: UserUpdateWithoutAudioAssetInput!
}

input UserUpsertWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  update: UserUpdateWithoutCommentInput!
}

input UserUpsertWithoutCommentLikeInput {
  create: UserCreateWithoutCommentLikeInput!
  update: UserUpdateWithoutCommentLikeInput!
}

input UserUpsertWithoutFeedInput {
  create: UserCreateWithoutFeedInput!
  update: UserUpdateWithoutFeedInput!
}

input UserUpsertWithoutFeedItemLikeInput {
  create: UserCreateWithoutFeedItemLikeInput!
  update: UserUpdateWithoutFeedItemLikeInput!
}

input UserUpsertWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput!
  update: UserUpdateWithoutInterestsInput!
}

input UserUpsertWithoutMemberOfBandsInput {
  create: UserCreateWithoutMemberOfBandsInput!
  update: UserUpdateWithoutMemberOfBandsInput!
}

input UserUpsertWithoutMemberOfProjectsInput {
  create: UserCreateWithoutMemberOfProjectsInput!
  update: UserUpdateWithoutMemberOfProjectsInput!
}

input UserUpsertWithoutMixdownInput {
  create: UserCreateWithoutMixdownInput!
  update: UserUpdateWithoutMixdownInput!
}

input UserUpsertWithoutOwnsBandsInput {
  create: UserCreateWithoutOwnsBandsInput!
  update: UserUpdateWithoutOwnsBandsInput!
}

input UserUpsertWithoutOwnsProjectsInput {
  create: UserCreateWithoutOwnsProjectsInput!
  update: UserUpdateWithoutOwnsProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutAddressInput {
  create: UserCreateWithoutAddressInput!
  update: UserUpdateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowedByInput {
  create: UserCreateWithoutFollowedByInput!
  update: UserUpdateWithoutFollowedByInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  address: AddressRelationFilter
  addressId: StringNullableFilter
  AND: [UserWhereInput!]
  AudioAsset: AudioAssetListRelationFilter
  avatar: StringNullableFilter
  bio: StringNullableFilter
  Comment: CommentListRelationFilter
  CommentLike: CommentLikeListRelationFilter
  createdAt: DateTimeFilter
  EarlyAccessCode: EarlyAccessCodeListRelationFilter
  email: StringFilter
  feed: FeedItemListRelationFilter
  FeedItemLike: FeedItemLikeListRelationFilter
  followedBy: UserListRelationFilter
  following: UserListRelationFilter
  handle: StringFilter
  id: StringFilter
  interests: TagListRelationFilter
  isOnline: BoolFilter
  memberOfBands: UsersOnBandsListRelationFilter
  memberOfProjects: UsersOnProjectsListRelationFilter
  Mixdown: MixdownListRelationFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  ownsBands: BandListRelationFilter
  ownsProjects: ProjectListRelationFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  handle: String
  id: String
}
